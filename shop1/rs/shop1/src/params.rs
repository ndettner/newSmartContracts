// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ImmutableCallCheckProductParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallCheckProductParams {
    pub fn new() -> ImmutableCallCheckProductParams {
        ImmutableCallCheckProductParams {
            proxy: params_proxy(),
        }
    }

    // Product I want to check
    pub fn product(&self) -> ImmutableProductTemplate {
        ImmutableProductTemplate { proxy: self.proxy.root(PARAM_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct MutableCallCheckProductParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallCheckProductParams {
    // Product I want to check
    pub fn product(&self) -> MutableProductTemplate {
        MutableProductTemplate { proxy: self.proxy.root(PARAM_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct ImmutableCallCreateNewProductParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallCreateNewProductParams {
    pub fn new() -> ImmutableCallCreateNewProductParams {
        ImmutableCallCreateNewProductParams {
            proxy: params_proxy(),
        }
    }

    // name of musician
    pub fn musician_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Price of product
    pub fn price(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(PARAM_PRICE))
    }

    // type of Product e.g. Tshirt
    pub fn product_type(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallCreateNewProductParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallCreateNewProductParams {
    // name of musician
    pub fn musician_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Price of product
    pub fn price(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(PARAM_PRICE))
    }

    // type of Product e.g. Tshirt
    pub fn product_type(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableCallPayStoreParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallPayStoreParams {
    pub fn new() -> ImmutableCallPayStoreParams {
        ImmutableCallPayStoreParams {
            proxy: params_proxy(),
        }
    }

    // name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallPayStoreParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallPayStoreParams {
    // name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableInitParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn new() -> ImmutableInitParams {
        ImmutableInitParams {
            proxy: params_proxy(),
        }
    }

    // optional owner of this smart contract
    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableInitParams {
    pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    // optional owner of this smart contract
    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableSetOwnerParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetOwnerParams {
    pub fn new() -> ImmutableSetOwnerParams {
        ImmutableSetOwnerParams {
            proxy: params_proxy(),
        }
    }

    // new owner of this smart contract
    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableSetOwnerParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetOwnerParams {
    // new owner of this smart contract
    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableCallGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallGetShopStatisticsParams {
    pub fn new() -> ImmutableCallGetShopStatisticsParams {
        ImmutableCallGetShopStatisticsParams {
            proxy: params_proxy(),
        }
    }

    // name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallGetShopStatisticsParams {
    // name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}
