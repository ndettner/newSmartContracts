// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use russfest::*;
use crate::*;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
        FUNC_ACCEPT_SHOP,
        FUNC_ADD_MUSICIAN,
        FUNC_BUY_MERCH,
        FUNC_CALL_CHECK_PRODUCT,
        FUNC_CALL_CREATE_NEW_PRODUCT,
        FUNC_CALL_PAY_STORE,
        FUNC_CALL_PING_SHOP,
        FUNC_CALL_RECIEVE_PRODUCTS,
        FUNC_CALL_SEND_PRODUCT,
        FUNC_CANCEL_SHOP_REQUEST,
        FUNC_DENY_SHOP,
        FUNC_INIT,
        FUNC_REQUEST_SHOP_LICENCE,
        FUNC_SET_OWNER,
        FUNC_UPDATE_DENIED_SHOP_REQUEST,
        VIEW_CALL_GET_SHOP_STATISTICS,
        VIEW_GET_AGEND_ID,
        VIEW_GET_ALL_OPEN_SHOP_REQUESTS,
        VIEW_GET_ALL_PRODUCTS,
        VIEW_GET_ALL_REGISTERED_SHOPS,
        VIEW_GET_DENIED_SHOP_REQUESTS,
        VIEW_GET_ERROR_MESSAGES_VIEW,
        VIEW_GET_FESTIVAL_EARNINGS,
        VIEW_GET_MUSICIANS,
        VIEW_GET_MUSICIANS_WITHOUT_SHOP,
        VIEW_GET_OPEN_SHOP_REQUEST,
        VIEW_GET_OWNER,
        VIEW_GET_REGISTERED_SHOPS_FROM_OWNER,
        VIEW_GET_SHOP_STATISTICS,
        VIEW_GET_SPECIFIC_PRODUCTS,
        VIEW_GET_TIMESLOTS,
        VIEW_TEST_VIEW,
        VIEW_TEST_VIEW_SINGLE,
    ],
    funcs: &[
        func_accept_shop_thunk,
        func_add_musician_thunk,
        func_buy_merch_thunk,
        func_call_check_product_thunk,
        func_call_create_new_product_thunk,
        func_call_pay_store_thunk,
        func_call_ping_shop_thunk,
        func_call_recieve_products_thunk,
        func_call_send_product_thunk,
        func_cancel_shop_request_thunk,
        func_deny_shop_thunk,
        func_init_thunk,
        func_request_shop_licence_thunk,
        func_set_owner_thunk,
        func_update_denied_shop_request_thunk,
    ],
    views: &[
        view_call_get_shop_statistics_thunk,
        view_get_agend_id_thunk,
        view_get_all_open_shop_requests_thunk,
        view_get_all_products_thunk,
        view_get_all_registered_shops_thunk,
        view_get_denied_shop_requests_thunk,
        view_get_error_messages_view_thunk,
        view_get_festival_earnings_thunk,
        view_get_musicians_thunk,
        view_get_musicians_without_shop_thunk,
        view_get_open_shop_request_thunk,
        view_get_owner_thunk,
        view_get_registered_shops_from_owner_thunk,
        view_get_shop_statistics_thunk,
        view_get_specific_products_thunk,
        view_get_timeslots_thunk,
        view_test_view_thunk,
        view_test_view_single_thunk,
    ],
};

pub fn on_dispatch(index: i32) {
    EXPORT_MAP.dispatch(index);
}

pub struct AcceptShopContext {
    pub events: RussfestEvents,
    pub params: ImmutableAcceptShopParams,
    pub state:  MutableRussfestState,
}

fn func_accept_shop_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcAcceptShop");
    let f = AcceptShopContext {
        events: RussfestEvents {},
        params: ImmutableAcceptShopParams::new(),
        state:  MutableRussfestState::new(),
    };

    // only owner can accept Shop
    let access = f.state.owner();
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_accept_shop(ctx, &f);
    ctx.log("russfest.funcAcceptShop ok");
}

pub struct AddMusicianContext {
    pub events: RussfestEvents,
    pub params: ImmutableAddMusicianParams,
    pub state:  MutableRussfestState,
}

fn func_add_musician_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcAddMusician");
    let f = AddMusicianContext {
        events: RussfestEvents {},
        params: ImmutableAddMusicianParams::new(),
        state:  MutableRussfestState::new(),
    };

    // current owner of this smart contract
    let access = f.state.owner();
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    ctx.require(f.params.name().exists(), "missing mandatory param: name");
    func_add_musician(ctx, &f);
    ctx.log("russfest.funcAddMusician ok");
}

pub struct BuyMerchContext {
    pub events: RussfestEvents,
    pub params: ImmutableBuyMerchParams,
    pub state:  MutableRussfestState,
}

fn func_buy_merch_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcBuyMerch");
    let f = BuyMerchContext {
        events: RussfestEvents {},
        params: ImmutableBuyMerchParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.musician().exists(), "missing mandatory param: musician");
    ctx.require(f.params.product_type().exists(), "missing mandatory param: productType");
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_buy_merch(ctx, &f);
    ctx.log("russfest.funcBuyMerch ok");
}

pub struct CallCheckProductContext {
    pub events:  RussfestEvents,
    pub params:  ImmutableCallCheckProductParams,
    pub results: MutableCallCheckProductResults,
    pub state:   MutableRussfestState,
}

fn func_call_check_product_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallCheckProduct");
    let f = CallCheckProductContext {
        events:  RussfestEvents {},
        params:  ImmutableCallCheckProductParams::new(),
        results: MutableCallCheckProductResults::new(),
        state:   MutableRussfestState::new(),
    };
    func_call_check_product(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.funcCallCheckProduct ok");
}

pub struct CallCreateNewProductContext {
    pub events: RussfestEvents,
    pub params: ImmutableCallCreateNewProductParams,
    pub state:  MutableRussfestState,
}

fn func_call_create_new_product_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallCreateNewProduct");
    let f = CallCreateNewProductContext {
        events: RussfestEvents {},
        params: ImmutableCallCreateNewProductParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.musician_name().exists(), "missing mandatory param: musicianName");
    ctx.require(f.params.price().exists(), "missing mandatory param: price");
    ctx.require(f.params.product_type().exists(), "missing mandatory param: productType");
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_call_create_new_product(ctx, &f);
    ctx.log("russfest.funcCallCreateNewProduct ok");
}

pub struct CallPayStoreContext {
    pub events: RussfestEvents,
    pub params: ImmutableCallPayStoreParams,
    pub state:  MutableRussfestState,
}

fn func_call_pay_store_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallPayStore");
    let f = CallPayStoreContext {
        events: RussfestEvents {},
        params: ImmutableCallPayStoreParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_call_pay_store(ctx, &f);
    ctx.log("russfest.funcCallPayStore ok");
}

pub struct CallPingShopContext {
    pub events:  RussfestEvents,
    pub results: MutableCallPingShopResults,
    pub state:   MutableRussfestState,
}

fn func_call_ping_shop_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallPingShop");
    let f = CallPingShopContext {
        events:  RussfestEvents {},
        results: MutableCallPingShopResults::new(),
        state:   MutableRussfestState::new(),
    };
    func_call_ping_shop(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.funcCallPingShop ok");
}

pub struct CallRecieveProductsContext {
    pub events:  RussfestEvents,
    pub results: MutableCallRecieveProductsResults,
    pub state:   MutableRussfestState,
}

fn func_call_recieve_products_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallRecieveProducts");
    let f = CallRecieveProductsContext {
        events:  RussfestEvents {},
        results: MutableCallRecieveProductsResults::new(),
        state:   MutableRussfestState::new(),
    };
    func_call_recieve_products(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.funcCallRecieveProducts ok");
}

pub struct CallSendProductContext {
    pub events: RussfestEvents,
    pub state:  MutableRussfestState,
}

fn func_call_send_product_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCallSendProduct");
    let f = CallSendProductContext {
        events: RussfestEvents {},
        state:  MutableRussfestState::new(),
    };
    func_call_send_product(ctx, &f);
    ctx.log("russfest.funcCallSendProduct ok");
}

pub struct CancelShopRequestContext {
    pub events: RussfestEvents,
    pub params: ImmutableCancelShopRequestParams,
    pub state:  MutableRussfestState,
}

fn func_cancel_shop_request_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcCancelShopRequest");
    let f = CancelShopRequestContext {
        events: RussfestEvents {},
        params: ImmutableCancelShopRequestParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.name().exists(), "missing mandatory param: name");
    func_cancel_shop_request(ctx, &f);
    ctx.log("russfest.funcCancelShopRequest ok");
}

pub struct DenyShopContext {
    pub events: RussfestEvents,
    pub params: ImmutableDenyShopParams,
    pub state:  MutableRussfestState,
}

fn func_deny_shop_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcDenyShop");
    let f = DenyShopContext {
        events: RussfestEvents {},
        params: ImmutableDenyShopParams::new(),
        state:  MutableRussfestState::new(),
    };

    // only owner can accept Shop
    let access = f.state.owner();
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_deny_shop(ctx, &f);
    ctx.log("russfest.funcDenyShop ok");
}

pub struct InitContext {
    pub events: RussfestEvents,
    pub params: ImmutableInitParams,
    pub state:  MutableRussfestState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcInit");
    let f = InitContext {
        events: RussfestEvents {},
        params: ImmutableInitParams::new(),
        state:  MutableRussfestState::new(),
    };
    func_init(ctx, &f);
    ctx.log("russfest.funcInit ok");
}

pub struct RequestShopLicenceContext {
    pub events: RussfestEvents,
    pub params: ImmutableRequestShopLicenceParams,
    pub state:  MutableRussfestState,
}

fn func_request_shop_licence_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcRequestShopLicence");
    let f = RequestShopLicenceContext {
        events: RussfestEvents {},
        params: ImmutableRequestShopLicenceParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.fee().exists(), "missing mandatory param: fee");
    ctx.require(f.params.musician_name().exists(), "missing mandatory param: musicianName");
    ctx.require(f.params.name().exists(), "missing mandatory param: name");
    ctx.require(f.params.shop_hname().exists(), "missing mandatory param: shopHname");
    func_request_shop_licence(ctx, &f);
    ctx.log("russfest.funcRequestShopLicence ok");
}

pub struct SetOwnerContext {
    pub events: RussfestEvents,
    pub params: ImmutableSetOwnerParams,
    pub state:  MutableRussfestState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcSetOwner");
    let f = SetOwnerContext {
        events: RussfestEvents {},
        params: ImmutableSetOwnerParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.new_owner().exists(), "missing mandatory param: newOwner");
    func_set_owner(ctx, &f);
    ctx.log("russfest.funcSetOwner ok");
}

pub struct UpdateDeniedShopRequestContext {
    pub events: RussfestEvents,
    pub params: ImmutableUpdateDeniedShopRequestParams,
    pub state:  MutableRussfestState,
}

fn func_update_denied_shop_request_thunk(ctx: &ScFuncContext) {
    ctx.log("russfest.funcUpdateDeniedShopRequest");
    let f = UpdateDeniedShopRequestContext {
        events: RussfestEvents {},
        params: ImmutableUpdateDeniedShopRequestParams::new(),
        state:  MutableRussfestState::new(),
    };
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    func_update_denied_shop_request(ctx, &f);
    ctx.log("russfest.funcUpdateDeniedShopRequest ok");
}

pub struct CallGetShopStatisticsContext {
    pub params:  ImmutableCallGetShopStatisticsParams,
    pub results: MutableCallGetShopStatisticsResults,
    pub state:   ImmutableRussfestState,
}

fn view_call_get_shop_statistics_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewCallGetShopStatistics");
    let f = CallGetShopStatisticsContext {
        params:  ImmutableCallGetShopStatisticsParams::new(),
        results: MutableCallGetShopStatisticsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    view_call_get_shop_statistics(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewCallGetShopStatistics ok");
}

pub struct GetAgendIDContext {
    pub results: MutableGetAgendIDResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_agend_id_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetAgendID");
    let f = GetAgendIDContext {
        results: MutableGetAgendIDResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_agend_id(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetAgendID ok");
}

pub struct GetAllOpenShopRequestsContext {
    pub results: MutableGetAllOpenShopRequestsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_all_open_shop_requests_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetAllOpenShopRequests");
    let f = GetAllOpenShopRequestsContext {
        results: MutableGetAllOpenShopRequestsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_all_open_shop_requests(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetAllOpenShopRequests ok");
}

pub struct GetAllProductsContext {
    pub results: MutableGetAllProductsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_all_products_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetAllProducts");
    let f = GetAllProductsContext {
        results: MutableGetAllProductsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_all_products(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetAllProducts ok");
}

pub struct GetAllRegisteredShopsContext {
    pub results: MutableGetAllRegisteredShopsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_all_registered_shops_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetAllRegisteredShops");
    let f = GetAllRegisteredShopsContext {
        results: MutableGetAllRegisteredShopsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_all_registered_shops(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetAllRegisteredShops ok");
}

pub struct GetDeniedShopRequestsContext {
    pub params:  ImmutableGetDeniedShopRequestsParams,
    pub results: MutableGetDeniedShopRequestsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_denied_shop_requests_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetDeniedShopRequests");
    let f = GetDeniedShopRequestsContext {
        params:  ImmutableGetDeniedShopRequestsParams::new(),
        results: MutableGetDeniedShopRequestsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_owner().exists(), "missing mandatory param: shopOwner");
    view_get_denied_shop_requests(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetDeniedShopRequests ok");
}

pub struct GetErrorMessagesViewContext {
    pub params:  ImmutableGetErrorMessagesViewParams,
    pub results: MutableGetErrorMessagesViewResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_error_messages_view_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetErrorMessagesView");
    let f = GetErrorMessagesViewContext {
        params:  ImmutableGetErrorMessagesViewParams::new(),
        results: MutableGetErrorMessagesViewResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.request_id().exists(), "missing mandatory param: requestID");
    view_get_error_messages_view(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetErrorMessagesView ok");
}

pub struct GetFestivalEarningsContext {
    pub results: MutableGetFestivalEarningsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_festival_earnings_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetFestivalEarnings");
    let f = GetFestivalEarningsContext {
        results: MutableGetFestivalEarningsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_festival_earnings(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetFestivalEarnings ok");
}

pub struct GetMusiciansContext {
    pub results: MutableGetMusiciansResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_musicians_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetMusicians");
    let f = GetMusiciansContext {
        results: MutableGetMusiciansResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_musicians(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetMusicians ok");
}

pub struct GetMusiciansWithoutShopContext {
    pub results: MutableGetMusiciansWithoutShopResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_musicians_without_shop_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetMusiciansWithoutShop");
    let f = GetMusiciansWithoutShopContext {
        results: MutableGetMusiciansWithoutShopResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_musicians_without_shop(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetMusiciansWithoutShop ok");
}

pub struct GetOpenShopRequestContext {
    pub params:  ImmutableGetOpenShopRequestParams,
    pub results: MutableGetOpenShopRequestResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_open_shop_request_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetOpenShopRequest");
    let f = GetOpenShopRequestContext {
        params:  ImmutableGetOpenShopRequestParams::new(),
        results: MutableGetOpenShopRequestResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_owner().exists(), "missing mandatory param: shopOwner");
    view_get_open_shop_request(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetOpenShopRequest ok");
}

pub struct GetOwnerContext {
    pub results: MutableGetOwnerResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetOwner");
    let f = GetOwnerContext {
        results: MutableGetOwnerResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_owner(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetOwner ok");
}

pub struct GetRegisteredShopsFromOwnerContext {
    pub params:  ImmutableGetRegisteredShopsFromOwnerParams,
    pub results: MutableGetRegisteredShopsFromOwnerResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_registered_shops_from_owner_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetRegisteredShopsFromOwner");
    let f = GetRegisteredShopsFromOwnerContext {
        params:  ImmutableGetRegisteredShopsFromOwnerParams::new(),
        results: MutableGetRegisteredShopsFromOwnerResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_owner().exists(), "missing mandatory param: shopOwner");
    view_get_registered_shops_from_owner(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetRegisteredShopsFromOwner ok");
}

pub struct GetShopStatisticsContext {
    pub params:  ImmutableGetShopStatisticsParams,
    pub results: MutableGetShopStatisticsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_shop_statistics_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetShopStatistics");
    let f = GetShopStatisticsContext {
        params:  ImmutableGetShopStatisticsParams::new(),
        results: MutableGetShopStatisticsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    view_get_shop_statistics(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetShopStatistics ok");
}

pub struct GetSpecificProductsContext {
    pub params:  ImmutableGetSpecificProductsParams,
    pub results: MutableGetSpecificProductsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_specific_products_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetSpecificProducts");
    let f = GetSpecificProductsContext {
        params:  ImmutableGetSpecificProductsParams::new(),
        results: MutableGetSpecificProductsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    ctx.require(f.params.shop_name().exists(), "missing mandatory param: shopName");
    view_get_specific_products(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetSpecificProducts ok");
}

pub struct GetTimeslotsContext {
    pub results: MutableGetTimeslotsResults,
    pub state:   ImmutableRussfestState,
}

fn view_get_timeslots_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewGetTimeslots");
    let f = GetTimeslotsContext {
        results: MutableGetTimeslotsResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_get_timeslots(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewGetTimeslots ok");
}

pub struct TestViewContext {
    pub results: MutableTestViewResults,
    pub state:   ImmutableRussfestState,
}

fn view_test_view_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewTestView");
    let f = TestViewContext {
        results: MutableTestViewResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_test_view(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewTestView ok");
}

pub struct TestViewSingleContext {
    pub results: MutableTestViewSingleResults,
    pub state:   ImmutableRussfestState,
}

fn view_test_view_single_thunk(ctx: &ScViewContext) {
    ctx.log("russfest.viewTestViewSingle");
    let f = TestViewSingleContext {
        results: MutableTestViewSingleResults::new(),
        state:   ImmutableRussfestState::new(),
    };
    view_test_view_single(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("russfest.viewTestViewSingle ok");
}
