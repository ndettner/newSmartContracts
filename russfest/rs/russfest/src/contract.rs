// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]

use wasmlib::*;

use crate::*;

pub struct AcceptShopCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableAcceptShopParams,
}

pub struct AddMusicianCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableAddMusicianParams,
}

pub struct BuyMerchCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableBuyMerchParams,
}

pub struct CallCheckProductCall<'a> {
    pub func:    ScFunc<'a>,
    pub params:  MutableCallCheckProductParams,
    pub results: ImmutableCallCheckProductResults,
}

pub struct CallCreateNewProductCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableCallCreateNewProductParams,
}

pub struct CallPayStoreCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableCallPayStoreParams,
}

pub struct CallPingShopCall<'a> {
    pub func:    ScFunc<'a>,
    pub results: ImmutableCallPingShopResults,
}

pub struct CallRecieveProductsCall<'a> {
    pub func:    ScFunc<'a>,
    pub results: ImmutableCallRecieveProductsResults,
}

pub struct CallSendProductCall<'a> {
    pub func:   ScFunc<'a>,
}

pub struct CancelShopRequestCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableCancelShopRequestParams,
}

pub struct DenyShopCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableDenyShopParams,
}

pub struct InitCall<'a> {
    pub func:   ScInitFunc<'a>,
    pub params: MutableInitParams,
}

pub struct RequestShopLicenceCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableRequestShopLicenceParams,
}

pub struct SetOwnerCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableSetOwnerParams,
}

pub struct UpdateDeniedShopRequestCall<'a> {
    pub func:   ScFunc<'a>,
    pub params: MutableUpdateDeniedShopRequestParams,
}

pub struct CallGetShopStatisticsCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableCallGetShopStatisticsParams,
    pub results: ImmutableCallGetShopStatisticsResults,
}

pub struct GetAgendIDCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetAgendIDResults,
}

pub struct GetAllOpenShopRequestsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetAllOpenShopRequestsResults,
}

pub struct GetAllProductsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetAllProductsResults,
}

pub struct GetAllRegisteredShopsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetAllRegisteredShopsResults,
}

pub struct GetDeniedShopRequestsCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetDeniedShopRequestsParams,
    pub results: ImmutableGetDeniedShopRequestsResults,
}

pub struct GetErrorMessagesViewCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetErrorMessagesViewParams,
    pub results: ImmutableGetErrorMessagesViewResults,
}

pub struct GetFestivalEarningsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetFestivalEarningsResults,
}

pub struct GetMusiciansCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetMusiciansResults,
}

pub struct GetMusiciansWithoutShopCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetMusiciansWithoutShopResults,
}

pub struct GetOpenShopRequestCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetOpenShopRequestParams,
    pub results: ImmutableGetOpenShopRequestResults,
}

pub struct GetOwnerCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetOwnerResults,
}

pub struct GetRegisteredShopsFromOwnerCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetRegisteredShopsFromOwnerParams,
    pub results: ImmutableGetRegisteredShopsFromOwnerResults,
}

pub struct GetShopStatisticsCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetShopStatisticsParams,
    pub results: ImmutableGetShopStatisticsResults,
}

pub struct GetSpecificProductsCall<'a> {
    pub func:    ScView<'a>,
    pub params:  MutableGetSpecificProductsParams,
    pub results: ImmutableGetSpecificProductsResults,
}

pub struct GetTimeslotsCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableGetTimeslotsResults,
}

pub struct TestViewCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableTestViewResults,
}

pub struct TestViewSingleCall<'a> {
    pub func:    ScView<'a>,
    pub results: ImmutableTestViewSingleResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn accept_shop(ctx: &impl ScFuncClientContext) -> AcceptShopCall {
        let mut f = AcceptShopCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_ACCEPT_SHOP),
            params:  MutableAcceptShopParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn add_musician(ctx: &impl ScFuncClientContext) -> AddMusicianCall {
        let mut f = AddMusicianCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_ADD_MUSICIAN),
            params:  MutableAddMusicianParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn buy_merch(ctx: &impl ScFuncClientContext) -> BuyMerchCall {
        let mut f = BuyMerchCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_BUY_MERCH),
            params:  MutableBuyMerchParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn call_check_product(ctx: &impl ScFuncClientContext) -> CallCheckProductCall {
        let mut f = CallCheckProductCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_CHECK_PRODUCT),
            params:  MutableCallCheckProductParams { proxy: Proxy::nil() },
            results: ImmutableCallCheckProductResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn call_create_new_product(ctx: &impl ScFuncClientContext) -> CallCreateNewProductCall {
        let mut f = CallCreateNewProductCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_CREATE_NEW_PRODUCT),
            params:  MutableCallCreateNewProductParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn call_pay_store(ctx: &impl ScFuncClientContext) -> CallPayStoreCall {
        let mut f = CallPayStoreCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_PAY_STORE),
            params:  MutableCallPayStoreParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn call_ping_shop(ctx: &impl ScFuncClientContext) -> CallPingShopCall {
        let mut f = CallPingShopCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_PING_SHOP),
            results: ImmutableCallPingShopResults { proxy: Proxy::nil() },
        };
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn call_recieve_products(ctx: &impl ScFuncClientContext) -> CallRecieveProductsCall {
        let mut f = CallRecieveProductsCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_RECIEVE_PRODUCTS),
            results: ImmutableCallRecieveProductsResults { proxy: Proxy::nil() },
        };
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn call_send_product(ctx: &impl ScFuncClientContext) -> CallSendProductCall {
        CallSendProductCall {
            func: ScFunc::new(ctx, HSC_NAME, HFUNC_CALL_SEND_PRODUCT),
        }
    }

    pub fn cancel_shop_request(ctx: &impl ScFuncClientContext) -> CancelShopRequestCall {
        let mut f = CancelShopRequestCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_CANCEL_SHOP_REQUEST),
            params:  MutableCancelShopRequestParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn deny_shop(ctx: &impl ScFuncClientContext) -> DenyShopCall {
        let mut f = DenyShopCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_DENY_SHOP),
            params:  MutableDenyShopParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn init(ctx: &impl ScFuncClientContext) -> InitCall {
        let mut f = InitCall {
            func:    ScInitFunc::new(ctx, HSC_NAME, HFUNC_INIT),
            params:  MutableInitParams { proxy: Proxy::nil() },
        };
        ScInitFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn request_shop_licence(ctx: &impl ScFuncClientContext) -> RequestShopLicenceCall {
        let mut f = RequestShopLicenceCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_REQUEST_SHOP_LICENCE),
            params:  MutableRequestShopLicenceParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_owner(ctx: &impl ScFuncClientContext) -> SetOwnerCall {
        let mut f = SetOwnerCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_SET_OWNER),
            params:  MutableSetOwnerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn update_denied_shop_request(ctx: &impl ScFuncClientContext) -> UpdateDeniedShopRequestCall {
        let mut f = UpdateDeniedShopRequestCall {
            func:    ScFunc::new(ctx, HSC_NAME, HFUNC_UPDATE_DENIED_SHOP_REQUEST),
            params:  MutableUpdateDeniedShopRequestParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn call_get_shop_statistics(ctx: &impl ScViewClientContext) -> CallGetShopStatisticsCall {
        let mut f = CallGetShopStatisticsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_CALL_GET_SHOP_STATISTICS),
            params:  MutableCallGetShopStatisticsParams { proxy: Proxy::nil() },
            results: ImmutableCallGetShopStatisticsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_agend_id(ctx: &impl ScViewClientContext) -> GetAgendIDCall {
        let mut f = GetAgendIDCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_AGEND_ID),
            results: ImmutableGetAgendIDResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_all_open_shop_requests(ctx: &impl ScViewClientContext) -> GetAllOpenShopRequestsCall {
        let mut f = GetAllOpenShopRequestsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_ALL_OPEN_SHOP_REQUESTS),
            results: ImmutableGetAllOpenShopRequestsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_all_products(ctx: &impl ScViewClientContext) -> GetAllProductsCall {
        let mut f = GetAllProductsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_ALL_PRODUCTS),
            results: ImmutableGetAllProductsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_all_registered_shops(ctx: &impl ScViewClientContext) -> GetAllRegisteredShopsCall {
        let mut f = GetAllRegisteredShopsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_ALL_REGISTERED_SHOPS),
            results: ImmutableGetAllRegisteredShopsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_denied_shop_requests(ctx: &impl ScViewClientContext) -> GetDeniedShopRequestsCall {
        let mut f = GetDeniedShopRequestsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_DENIED_SHOP_REQUESTS),
            params:  MutableGetDeniedShopRequestsParams { proxy: Proxy::nil() },
            results: ImmutableGetDeniedShopRequestsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_error_messages_view(ctx: &impl ScViewClientContext) -> GetErrorMessagesViewCall {
        let mut f = GetErrorMessagesViewCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_ERROR_MESSAGES_VIEW),
            params:  MutableGetErrorMessagesViewParams { proxy: Proxy::nil() },
            results: ImmutableGetErrorMessagesViewResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_festival_earnings(ctx: &impl ScViewClientContext) -> GetFestivalEarningsCall {
        let mut f = GetFestivalEarningsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_FESTIVAL_EARNINGS),
            results: ImmutableGetFestivalEarningsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_musicians(ctx: &impl ScViewClientContext) -> GetMusiciansCall {
        let mut f = GetMusiciansCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_MUSICIANS),
            results: ImmutableGetMusiciansResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_musicians_without_shop(ctx: &impl ScViewClientContext) -> GetMusiciansWithoutShopCall {
        let mut f = GetMusiciansWithoutShopCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_MUSICIANS_WITHOUT_SHOP),
            results: ImmutableGetMusiciansWithoutShopResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_open_shop_request(ctx: &impl ScViewClientContext) -> GetOpenShopRequestCall {
        let mut f = GetOpenShopRequestCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_OPEN_SHOP_REQUEST),
            params:  MutableGetOpenShopRequestParams { proxy: Proxy::nil() },
            results: ImmutableGetOpenShopRequestResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_owner(ctx: &impl ScViewClientContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_registered_shops_from_owner(ctx: &impl ScViewClientContext) -> GetRegisteredShopsFromOwnerCall {
        let mut f = GetRegisteredShopsFromOwnerCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_REGISTERED_SHOPS_FROM_OWNER),
            params:  MutableGetRegisteredShopsFromOwnerParams { proxy: Proxy::nil() },
            results: ImmutableGetRegisteredShopsFromOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_shop_statistics(ctx: &impl ScViewClientContext) -> GetShopStatisticsCall {
        let mut f = GetShopStatisticsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_SHOP_STATISTICS),
            params:  MutableGetShopStatisticsParams { proxy: Proxy::nil() },
            results: ImmutableGetShopStatisticsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_specific_products(ctx: &impl ScViewClientContext) -> GetSpecificProductsCall {
        let mut f = GetSpecificProductsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_SPECIFIC_PRODUCTS),
            params:  MutableGetSpecificProductsParams { proxy: Proxy::nil() },
            results: ImmutableGetSpecificProductsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_timeslots(ctx: &impl ScViewClientContext) -> GetTimeslotsCall {
        let mut f = GetTimeslotsCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_GET_TIMESLOTS),
            results: ImmutableGetTimeslotsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn test_view(ctx: &impl ScViewClientContext) -> TestViewCall {
        let mut f = TestViewCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_TEST_VIEW),
            results: ImmutableTestViewResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn test_view_single(ctx: &impl ScViewClientContext) -> TestViewSingleCall {
        let mut f = TestViewSingleCall {
            func:    ScView::new(ctx, HSC_NAME, HVIEW_TEST_VIEW_SINGLE),
            results: ImmutableTestViewSingleResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
