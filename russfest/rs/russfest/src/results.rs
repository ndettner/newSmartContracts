// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ImmutableCallCheckProductResults {
    pub proxy: Proxy,
}

impl ImmutableCallCheckProductResults {
    // shows if SC can produce Product
    pub fn can_produce(&self) -> ScImmutableBool {
        ScImmutableBool::new(self.proxy.root(RESULT_CAN_PRODUCE))
    }

    // optional error message
    pub fn message(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_MESSAGE))
    }
}

#[derive(Clone)]
pub struct MutableCallCheckProductResults {
    pub proxy: Proxy,
}

impl MutableCallCheckProductResults {
    pub fn new() -> MutableCallCheckProductResults {
        MutableCallCheckProductResults {
            proxy: results_proxy(),
        }
    }

    // shows if SC can produce Product
    pub fn can_produce(&self) -> ScMutableBool {
        ScMutableBool::new(self.proxy.root(RESULT_CAN_PRODUCE))
    }

    // optional error message
    pub fn message(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_MESSAGE))
    }
}

#[derive(Clone)]
pub struct ImmutableCallPingShopResults {
    pub proxy: Proxy,
}

impl ImmutableCallPingShopResults {
    // shows if ping was successful
    pub fn ping_successful(&self) -> ScImmutableBool {
        ScImmutableBool::new(self.proxy.root(RESULT_PING_SUCCESSFUL))
    }
}

#[derive(Clone)]
pub struct MutableCallPingShopResults {
    pub proxy: Proxy,
}

impl MutableCallPingShopResults {
    pub fn new() -> MutableCallPingShopResults {
        MutableCallPingShopResults {
            proxy: results_proxy(),
        }
    }

    // shows if ping was successful
    pub fn ping_successful(&self) -> ScMutableBool {
        ScMutableBool::new(self.proxy.root(RESULT_PING_SUCCESSFUL))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableProduct {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableProduct {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_product(&self, index: u32) -> ImmutableProduct {
        ImmutableProduct { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ImmutableCallRecieveProductsResults {
    pub proxy: Proxy,
}

impl ImmutableCallRecieveProductsResults {
    // products that are ready to ship to russfest
    pub fn product(&self) -> ArrayOfImmutableProduct {
        ArrayOfImmutableProduct { proxy: self.proxy.root(RESULT_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableProduct {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableProduct {

    pub fn append_product(&self) -> MutableProduct {
        MutableProduct { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_product(&self, index: u32) -> MutableProduct {
        MutableProduct { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct MutableCallRecieveProductsResults {
    pub proxy: Proxy,
}

impl MutableCallRecieveProductsResults {
    pub fn new() -> MutableCallRecieveProductsResults {
        MutableCallRecieveProductsResults {
            proxy: results_proxy(),
        }
    }

    // products that are ready to ship to russfest
    pub fn product(&self) -> ArrayOfMutableProduct {
        ArrayOfMutableProduct { proxy: self.proxy.root(RESULT_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableStatisticProduct {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableStatisticProduct {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_statistic_product(&self, index: u32) -> ImmutableStatisticProduct {
        ImmutableStatisticProduct { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableProductTemplate {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableProductTemplate {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_product_template(&self, index: u32) -> ImmutableProductTemplate {
        ImmutableProductTemplate { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ImmutableCallGetShopStatisticsResults {
    pub proxy: Proxy,
}

impl ImmutableCallGetShopStatisticsResults {
    // earnings of shop
    pub fn earnings(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_EARNINGS))
    }

    // max production step for this shop
    pub fn max_productions_step(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_MAX_PRODUCTIONS_STEP))
    }

    // produced Products for this Shop
    pub fn produced_products(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_PRODUCED_PRODUCTS))
    }

    // all Products that currently are in production
    pub fn production(&self) -> ArrayOfImmutableStatisticProduct {
        ArrayOfImmutableStatisticProduct { proxy: self.proxy.root(RESULT_PRODUCTION) }
    }

    // all ProductTemplates that exist for this shop
    pub fn production_templates(&self) -> ArrayOfImmutableProductTemplate {
        ArrayOfImmutableProductTemplate { proxy: self.proxy.root(RESULT_PRODUCTION_TEMPLATES) }
    }

    // sold porducts for this shop
    pub fn sold_products(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_SOLD_PRODUCTS))
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableStatisticProduct {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableStatisticProduct {

    pub fn append_statistic_product(&self) -> MutableStatisticProduct {
        MutableStatisticProduct { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_statistic_product(&self, index: u32) -> MutableStatisticProduct {
        MutableStatisticProduct { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableProductTemplate {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableProductTemplate {

    pub fn append_product_template(&self) -> MutableProductTemplate {
        MutableProductTemplate { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_product_template(&self, index: u32) -> MutableProductTemplate {
        MutableProductTemplate { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct MutableCallGetShopStatisticsResults {
    pub proxy: Proxy,
}

impl MutableCallGetShopStatisticsResults {
    pub fn new() -> MutableCallGetShopStatisticsResults {
        MutableCallGetShopStatisticsResults {
            proxy: results_proxy(),
        }
    }

    // earnings of shop
    pub fn earnings(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_EARNINGS))
    }

    // max production step for this shop
    pub fn max_productions_step(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_MAX_PRODUCTIONS_STEP))
    }

    // produced Products for this Shop
    pub fn produced_products(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_PRODUCED_PRODUCTS))
    }

    // all Products that currently are in production
    pub fn production(&self) -> ArrayOfMutableStatisticProduct {
        ArrayOfMutableStatisticProduct { proxy: self.proxy.root(RESULT_PRODUCTION) }
    }

    // all ProductTemplates that exist for this shop
    pub fn production_templates(&self) -> ArrayOfMutableProductTemplate {
        ArrayOfMutableProductTemplate { proxy: self.proxy.root(RESULT_PRODUCTION_TEMPLATES) }
    }

    // sold porducts for this shop
    pub fn sold_products(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_SOLD_PRODUCTS))
    }
}

#[derive(Clone)]
pub struct ImmutableGetAgendIDResults {
    pub proxy: Proxy,
}

impl ImmutableGetAgendIDResults {
    // AgentID of SC
    pub fn sc_agent_id(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(RESULT_SC_AGENT_ID))
    }
}

#[derive(Clone)]
pub struct MutableGetAgendIDResults {
    pub proxy: Proxy,
}

impl MutableGetAgendIDResults {
    pub fn new() -> MutableGetAgendIDResults {
        MutableGetAgendIDResults {
            proxy: results_proxy(),
        }
    }

    // AgentID of SC
    pub fn sc_agent_id(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(RESULT_SC_AGENT_ID))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableShop {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableShop {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_shop(&self, index: u32) -> ImmutableShop {
        ImmutableShop { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetAllOpenShopRequestsResults {
    pub proxy: Proxy,
}

impl ImmutableGetAllOpenShopRequestsResults {
    // all open Shop requests
    pub fn open_shop_request(&self) -> ArrayOfImmutableShop {
        ArrayOfImmutableShop { proxy: self.proxy.root(RESULT_OPEN_SHOP_REQUEST) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableShop {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableShop {

    pub fn append_shop(&self) -> MutableShop {
        MutableShop { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_shop(&self, index: u32) -> MutableShop {
        MutableShop { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct MutableGetAllOpenShopRequestsResults {
    pub proxy: Proxy,
}

impl MutableGetAllOpenShopRequestsResults {
    pub fn new() -> MutableGetAllOpenShopRequestsResults {
        MutableGetAllOpenShopRequestsResults {
            proxy: results_proxy(),
        }
    }

    // all open Shop requests
    pub fn open_shop_request(&self) -> ArrayOfMutableShop {
        ArrayOfMutableShop { proxy: self.proxy.root(RESULT_OPEN_SHOP_REQUEST) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetAllProductsResults {
    pub proxy: Proxy,
}

impl ImmutableGetAllProductsResults {
    // get all available Products
    pub fn products(&self) -> ArrayOfImmutableProduct {
        ArrayOfImmutableProduct { proxy: self.proxy.root(RESULT_PRODUCTS) }
    }
}

#[derive(Clone)]
pub struct MutableGetAllProductsResults {
    pub proxy: Proxy,
}

impl MutableGetAllProductsResults {
    pub fn new() -> MutableGetAllProductsResults {
        MutableGetAllProductsResults {
            proxy: results_proxy(),
        }
    }

    // get all available Products
    pub fn products(&self) -> ArrayOfMutableProduct {
        ArrayOfMutableProduct { proxy: self.proxy.root(RESULT_PRODUCTS) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetAllRegisteredShopsResults {
    pub proxy: Proxy,
}

impl ImmutableGetAllRegisteredShopsResults {
    // all registered shops
    pub fn shops(&self) -> ArrayOfImmutableShop {
        ArrayOfImmutableShop { proxy: self.proxy.root(RESULT_SHOPS) }
    }
}

#[derive(Clone)]
pub struct MutableGetAllRegisteredShopsResults {
    pub proxy: Proxy,
}

impl MutableGetAllRegisteredShopsResults {
    pub fn new() -> MutableGetAllRegisteredShopsResults {
        MutableGetAllRegisteredShopsResults {
            proxy: results_proxy(),
        }
    }

    // all registered shops
    pub fn shops(&self) -> ArrayOfMutableShop {
        ArrayOfMutableShop { proxy: self.proxy.root(RESULT_SHOPS) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetDeniedShopRequestsResults {
    pub proxy: Proxy,
}

impl ImmutableGetDeniedShopRequestsResults {
    // all denied Shop request of Shop owner
    pub fn denied_shop_requests(&self) -> ArrayOfImmutableShop {
        ArrayOfImmutableShop { proxy: self.proxy.root(RESULT_DENIED_SHOP_REQUESTS) }
    }
}

#[derive(Clone)]
pub struct MutableGetDeniedShopRequestsResults {
    pub proxy: Proxy,
}

impl MutableGetDeniedShopRequestsResults {
    pub fn new() -> MutableGetDeniedShopRequestsResults {
        MutableGetDeniedShopRequestsResults {
            proxy: results_proxy(),
        }
    }

    // all denied Shop request of Shop owner
    pub fn denied_shop_requests(&self) -> ArrayOfMutableShop {
        ArrayOfMutableShop { proxy: self.proxy.root(RESULT_DENIED_SHOP_REQUESTS) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetErrorMessagesViewResults {
    pub proxy: Proxy,
}

impl ImmutableGetErrorMessagesViewResults {
    pub fn error_message(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_ERROR_MESSAGE))
    }
}

#[derive(Clone)]
pub struct MutableGetErrorMessagesViewResults {
    pub proxy: Proxy,
}

impl MutableGetErrorMessagesViewResults {
    pub fn new() -> MutableGetErrorMessagesViewResults {
        MutableGetErrorMessagesViewResults {
            proxy: results_proxy(),
        }
    }

    pub fn error_message(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_ERROR_MESSAGE))
    }
}

#[derive(Clone)]
pub struct ImmutableGetFestivalEarningsResults {
    pub proxy: Proxy,
}

impl ImmutableGetFestivalEarningsResults {
    // earnings of festival
    pub fn festival_earnings(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_FESTIVAL_EARNINGS))
    }
}

#[derive(Clone)]
pub struct MutableGetFestivalEarningsResults {
    pub proxy: Proxy,
}

impl MutableGetFestivalEarningsResults {
    pub fn new() -> MutableGetFestivalEarningsResults {
        MutableGetFestivalEarningsResults {
            proxy: results_proxy(),
        }
    }

    // earnings of festival
    pub fn festival_earnings(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_FESTIVAL_EARNINGS))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableMusician {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableMusician {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_musician(&self, index: u32) -> ImmutableMusician {
        ImmutableMusician { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetMusiciansResults {
    pub proxy: Proxy,
}

impl ImmutableGetMusiciansResults {
    // all known Musicians
    pub fn musicians(&self) -> ArrayOfImmutableMusician {
        ArrayOfImmutableMusician { proxy: self.proxy.root(RESULT_MUSICIANS) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableMusician {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableMusician {

    pub fn append_musician(&self) -> MutableMusician {
        MutableMusician { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_musician(&self, index: u32) -> MutableMusician {
        MutableMusician { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct MutableGetMusiciansResults {
    pub proxy: Proxy,
}

impl MutableGetMusiciansResults {
    pub fn new() -> MutableGetMusiciansResults {
        MutableGetMusiciansResults {
            proxy: results_proxy(),
        }
    }

    // all known Musicians
    pub fn musicians(&self) -> ArrayOfMutableMusician {
        ArrayOfMutableMusician { proxy: self.proxy.root(RESULT_MUSICIANS) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetMusiciansWithoutShopResults {
    pub proxy: Proxy,
}

impl ImmutableGetMusiciansWithoutShopResults {
    // all known Musicians without Shop
    pub fn musicians_without_shop(&self) -> ArrayOfImmutableMusician {
        ArrayOfImmutableMusician { proxy: self.proxy.root(RESULT_MUSICIANS_WITHOUT_SHOP) }
    }
}

#[derive(Clone)]
pub struct MutableGetMusiciansWithoutShopResults {
    pub proxy: Proxy,
}

impl MutableGetMusiciansWithoutShopResults {
    pub fn new() -> MutableGetMusiciansWithoutShopResults {
        MutableGetMusiciansWithoutShopResults {
            proxy: results_proxy(),
        }
    }

    // all known Musicians without Shop
    pub fn musicians_without_shop(&self) -> ArrayOfMutableMusician {
        ArrayOfMutableMusician { proxy: self.proxy.root(RESULT_MUSICIANS_WITHOUT_SHOP) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetOpenShopRequestResults {
    pub proxy: Proxy,
}

impl ImmutableGetOpenShopRequestResults {
    // all open Shop requests from specified shop owner
    pub fn open_shop_request(&self) -> ArrayOfImmutableShop {
        ArrayOfImmutableShop { proxy: self.proxy.root(RESULT_OPEN_SHOP_REQUEST) }
    }
}

#[derive(Clone)]
pub struct MutableGetOpenShopRequestResults {
    pub proxy: Proxy,
}

impl MutableGetOpenShopRequestResults {
    pub fn new() -> MutableGetOpenShopRequestResults {
        MutableGetOpenShopRequestResults {
            proxy: results_proxy(),
        }
    }

    // all open Shop requests from specified shop owner
    pub fn open_shop_request(&self) -> ArrayOfMutableShop {
        ArrayOfMutableShop { proxy: self.proxy.root(RESULT_OPEN_SHOP_REQUEST) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetOwnerResults {
    pub proxy: Proxy,
}

impl ImmutableGetOwnerResults {
    // current owner of this smart contract
    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(RESULT_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableGetOwnerResults {
    pub proxy: Proxy,
}

impl MutableGetOwnerResults {
    pub fn new() -> MutableGetOwnerResults {
        MutableGetOwnerResults {
            proxy: results_proxy(),
        }
    }

    // current owner of this smart contract
    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(RESULT_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableGetRegisteredShopsFromOwnerResults {
    pub proxy: Proxy,
}

impl ImmutableGetRegisteredShopsFromOwnerResults {
    // all registered shops from owner
    pub fn owner_shops(&self) -> ArrayOfImmutableShop {
        ArrayOfImmutableShop { proxy: self.proxy.root(RESULT_OWNER_SHOPS) }
    }
}

#[derive(Clone)]
pub struct MutableGetRegisteredShopsFromOwnerResults {
    pub proxy: Proxy,
}

impl MutableGetRegisteredShopsFromOwnerResults {
    pub fn new() -> MutableGetRegisteredShopsFromOwnerResults {
        MutableGetRegisteredShopsFromOwnerResults {
            proxy: results_proxy(),
        }
    }

    // all registered shops from owner
    pub fn owner_shops(&self) -> ArrayOfMutableShop {
        ArrayOfMutableShop { proxy: self.proxy.root(RESULT_OWNER_SHOPS) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetShopStatisticsResults {
    pub proxy: Proxy,
}

impl ImmutableGetShopStatisticsResults {
    // earnings of shop
    pub fn earnings(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_EARNINGS))
    }

    // max production step for this shop
    pub fn max_productions_step(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_MAX_PRODUCTIONS_STEP))
    }

    // name of the musician
    pub fn musician(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_MUSICIAN))
    }

    // produced Products for this Shop
    pub fn produced_products(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_PRODUCED_PRODUCTS))
    }

    // all Products that currently are in production
    pub fn production(&self) -> ArrayOfImmutableStatisticProduct {
        ArrayOfImmutableStatisticProduct { proxy: self.proxy.root(RESULT_PRODUCTION) }
    }

    // all ProductTemplates that exist for this shop
    pub fn production_templates(&self) -> ArrayOfImmutableProductTemplate {
        ArrayOfImmutableProductTemplate { proxy: self.proxy.root(RESULT_PRODUCTION_TEMPLATES) }
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_SHOP_NAME))
    }

    // sold porducts for this shop
    pub fn sold_products(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(RESULT_SOLD_PRODUCTS))
    }
}

#[derive(Clone)]
pub struct MutableGetShopStatisticsResults {
    pub proxy: Proxy,
}

impl MutableGetShopStatisticsResults {
    pub fn new() -> MutableGetShopStatisticsResults {
        MutableGetShopStatisticsResults {
            proxy: results_proxy(),
        }
    }

    // earnings of shop
    pub fn earnings(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_EARNINGS))
    }

    // max production step for this shop
    pub fn max_productions_step(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_MAX_PRODUCTIONS_STEP))
    }

    // name of the musician
    pub fn musician(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_MUSICIAN))
    }

    // produced Products for this Shop
    pub fn produced_products(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_PRODUCED_PRODUCTS))
    }

    // all Products that currently are in production
    pub fn production(&self) -> ArrayOfMutableStatisticProduct {
        ArrayOfMutableStatisticProduct { proxy: self.proxy.root(RESULT_PRODUCTION) }
    }

    // all ProductTemplates that exist for this shop
    pub fn production_templates(&self) -> ArrayOfMutableProductTemplate {
        ArrayOfMutableProductTemplate { proxy: self.proxy.root(RESULT_PRODUCTION_TEMPLATES) }
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_SHOP_NAME))
    }

    // sold porducts for this shop
    pub fn sold_products(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(RESULT_SOLD_PRODUCTS))
    }
}

#[derive(Clone)]
pub struct ImmutableGetSpecificProductsResults {
    pub proxy: Proxy,
}

impl ImmutableGetSpecificProductsResults {
    // get all available Products of specific Musician
    pub fn products(&self) -> ArrayOfImmutableProduct {
        ArrayOfImmutableProduct { proxy: self.proxy.root(RESULT_PRODUCTS) }
    }
}

#[derive(Clone)]
pub struct MutableGetSpecificProductsResults {
    pub proxy: Proxy,
}

impl MutableGetSpecificProductsResults {
    pub fn new() -> MutableGetSpecificProductsResults {
        MutableGetSpecificProductsResults {
            proxy: results_proxy(),
        }
    }

    // get all available Products of specific Musician
    pub fn products(&self) -> ArrayOfMutableProduct {
        ArrayOfMutableProduct { proxy: self.proxy.root(RESULT_PRODUCTS) }
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableTimeslot {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableTimeslot {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_timeslot(&self, index: u32) -> ImmutableTimeslot {
        ImmutableTimeslot { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct ImmutableGetTimeslotsResults {
    pub proxy: Proxy,
}

impl ImmutableGetTimeslotsResults {
    // all filled timeslots
    pub fn timeslots(&self) -> ArrayOfImmutableTimeslot {
        ArrayOfImmutableTimeslot { proxy: self.proxy.root(RESULT_TIMESLOTS) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableTimeslot {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableTimeslot {

    pub fn append_timeslot(&self) -> MutableTimeslot {
        MutableTimeslot { proxy: self.proxy.append() }
    }
    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


    pub fn get_timeslot(&self, index: u32) -> MutableTimeslot {
        MutableTimeslot { proxy: self.proxy.index(index) }
    }
}

#[derive(Clone)]
pub struct MutableGetTimeslotsResults {
    pub proxy: Proxy,
}

impl MutableGetTimeslotsResults {
    pub fn new() -> MutableGetTimeslotsResults {
        MutableGetTimeslotsResults {
            proxy: results_proxy(),
        }
    }

    // all filled timeslots
    pub fn timeslots(&self) -> ArrayOfMutableTimeslot {
        ArrayOfMutableTimeslot { proxy: self.proxy.root(RESULT_TIMESLOTS) }
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableString {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableString {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScImmutableString {
        ScImmutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutableTestViewResults {
    pub proxy: Proxy,
}

impl ImmutableTestViewResults {
    // array of test Strings
    pub fn test_string(&self) -> ArrayOfImmutableString {
        ArrayOfImmutableString { proxy: self.proxy.root(RESULT_TEST_STRING) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableString {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableString {
    pub fn append_string(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.append())
    }

    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScMutableString {
        ScMutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutableTestViewResults {
    pub proxy: Proxy,
}

impl MutableTestViewResults {
    pub fn new() -> MutableTestViewResults {
        MutableTestViewResults {
            proxy: results_proxy(),
        }
    }

    // array of test Strings
    pub fn test_string(&self) -> ArrayOfMutableString {
        ArrayOfMutableString { proxy: self.proxy.root(RESULT_TEST_STRING) }
    }
}

#[derive(Clone)]
pub struct ImmutableTestViewSingleResults {
    pub proxy: Proxy,
}

impl ImmutableTestViewSingleResults {
    // single String
    pub fn singe_string(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(RESULT_SINGE_STRING))
    }
}

#[derive(Clone)]
pub struct MutableTestViewSingleResults {
    pub proxy: Proxy,
}

impl MutableTestViewSingleResults {
    pub fn new() -> MutableTestViewSingleResults {
        MutableTestViewSingleResults {
            proxy: results_proxy(),
        }
    }

    // single String
    pub fn singe_string(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(RESULT_SINGE_STRING))
    }
}
