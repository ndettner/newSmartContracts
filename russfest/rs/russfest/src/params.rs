// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ImmutableAcceptShopParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableAcceptShopParams {
    pub fn new() -> ImmutableAcceptShopParams {
        ImmutableAcceptShopParams {
            proxy: params_proxy(),
        }
    }

    // Name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableAcceptShopParams {
    pub(crate) proxy: Proxy,
}

impl MutableAcceptShopParams {
    // Name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableAddMusicianParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableAddMusicianParams {
    pub fn new() -> ImmutableAddMusicianParams {
        ImmutableAddMusicianParams {
            proxy: params_proxy(),
        }
    }

    // name of musician
    pub fn name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_NAME))
    }

    // optional shop for merch
    pub fn shop(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP))
    }
}

#[derive(Clone)]
pub struct MutableAddMusicianParams {
    pub(crate) proxy: Proxy,
}

impl MutableAddMusicianParams {
    // name of musician
    pub fn name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_NAME))
    }

    // optional shop for merch
    pub fn shop(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP))
    }
}

#[derive(Clone)]
pub struct ImmutableBuyMerchParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableBuyMerchParams {
    pub fn new() -> ImmutableBuyMerchParams {
        ImmutableBuyMerchParams {
            proxy: params_proxy(),
        }
    }

    // Musician
    pub fn musician(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_MUSICIAN))
    }

    // type of Product
    pub fn product_type(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // Name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableBuyMerchParams {
    pub(crate) proxy: Proxy,
}

impl MutableBuyMerchParams {
    // Musician
    pub fn musician(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_MUSICIAN))
    }

    // type of Product
    pub fn product_type(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // Name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableCallCheckProductParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallCheckProductParams {
    pub fn new() -> ImmutableCallCheckProductParams {
        ImmutableCallCheckProductParams {
            proxy: params_proxy(),
        }
    }

    // Product I want to check
    pub fn product(&self) -> ImmutableProductTemplate {
        ImmutableProductTemplate { proxy: self.proxy.root(PARAM_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct MutableCallCheckProductParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallCheckProductParams {
    // Product I want to check
    pub fn product(&self) -> MutableProductTemplate {
        MutableProductTemplate { proxy: self.proxy.root(PARAM_PRODUCT) }
    }
}

#[derive(Clone)]
pub struct ImmutableCallCreateNewProductParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallCreateNewProductParams {
    pub fn new() -> ImmutableCallCreateNewProductParams {
        ImmutableCallCreateNewProductParams {
            proxy: params_proxy(),
        }
    }

    // name of musician
    pub fn musician_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Price of product
    pub fn price(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(PARAM_PRICE))
    }

    // type of Product e.g. Tshirt
    pub fn product_type(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallCreateNewProductParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallCreateNewProductParams {
    // name of musician
    pub fn musician_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Price of product
    pub fn price(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(PARAM_PRICE))
    }

    // type of Product e.g. Tshirt
    pub fn product_type(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_PRODUCT_TYPE))
    }

    // name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableCallPayStoreParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallPayStoreParams {
    pub fn new() -> ImmutableCallPayStoreParams {
        ImmutableCallPayStoreParams {
            proxy: params_proxy(),
        }
    }

    // name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallPayStoreParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallPayStoreParams {
    // name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableCancelShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCancelShopRequestParams {
    pub fn new() -> ImmutableCancelShopRequestParams {
        ImmutableCancelShopRequestParams {
            proxy: params_proxy(),
        }
    }

    // Name of the Shop
    pub fn name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCancelShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl MutableCancelShopRequestParams {
    // Name of the Shop
    pub fn name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableDenyShopParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableDenyShopParams {
    pub fn new() -> ImmutableDenyShopParams {
        ImmutableDenyShopParams {
            proxy: params_proxy(),
        }
    }

    // Name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableDenyShopParams {
    pub(crate) proxy: Proxy,
}

impl MutableDenyShopParams {
    // Name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableInitParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn new() -> ImmutableInitParams {
        ImmutableInitParams {
            proxy: params_proxy(),
        }
    }

    // optional owner of this smart contract
    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableInitParams {
    pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    // optional owner of this smart contract
    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableRequestShopLicenceParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableRequestShopLicenceParams {
    pub fn new() -> ImmutableRequestShopLicenceParams {
        ImmutableRequestShopLicenceParams {
            proxy: params_proxy(),
        }
    }

    // fee to pay
    pub fn fee(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(PARAM_FEE))
    }

    // Name of the Musician
    pub fn musician_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Name of the Shop
    pub fn name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_NAME))
    }

    // hname of Shop
    pub fn shop_hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.proxy.root(PARAM_SHOP_HNAME))
    }
}

#[derive(Clone)]
pub struct MutableRequestShopLicenceParams {
    pub(crate) proxy: Proxy,
}

impl MutableRequestShopLicenceParams {
    // fee to pay
    pub fn fee(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(PARAM_FEE))
    }

    // Name of the Musician
    pub fn musician_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_MUSICIAN_NAME))
    }

    // Name of the Shop
    pub fn name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_NAME))
    }

    // hname of Shop
    pub fn shop_hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.proxy.root(PARAM_SHOP_HNAME))
    }
}

#[derive(Clone)]
pub struct ImmutableSetOwnerParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableSetOwnerParams {
    pub fn new() -> ImmutableSetOwnerParams {
        ImmutableSetOwnerParams {
            proxy: params_proxy(),
        }
    }

    // new owner of this smart contract
    pub fn new_owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_NEW_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableSetOwnerParams {
    pub(crate) proxy: Proxy,
}

impl MutableSetOwnerParams {
    // new owner of this smart contract
    pub fn new_owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_NEW_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableUpdateDeniedShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableUpdateDeniedShopRequestParams {
    pub fn new() -> ImmutableUpdateDeniedShopRequestParams {
        ImmutableUpdateDeniedShopRequestParams {
            proxy: params_proxy(),
        }
    }

    // fee to pay
    pub fn newfee(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(PARAM_NEWFEE))
    }

    // new Hname of Address
    pub fn new_hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.proxy.root(PARAM_NEW_HNAME))
    }

    // Name of the Shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableUpdateDeniedShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl MutableUpdateDeniedShopRequestParams {
    // fee to pay
    pub fn newfee(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(PARAM_NEWFEE))
    }

    // new Hname of Address
    pub fn new_hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.proxy.root(PARAM_NEW_HNAME))
    }

    // Name of the Shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableCallGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableCallGetShopStatisticsParams {
    pub fn new() -> ImmutableCallGetShopStatisticsParams {
        ImmutableCallGetShopStatisticsParams {
            proxy: params_proxy(),
        }
    }

    // name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableCallGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl MutableCallGetShopStatisticsParams {
    // name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableGetDeniedShopRequestsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetDeniedShopRequestsParams {
    pub fn new() -> ImmutableGetDeniedShopRequestsParams {
        ImmutableGetDeniedShopRequestsParams {
            proxy: params_proxy(),
        }
    }

    // ID of shop Owner
    pub fn shop_owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableGetDeniedShopRequestsParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetDeniedShopRequestsParams {
    // ID of shop Owner
    pub fn shop_owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableGetErrorMessagesViewParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetErrorMessagesViewParams {
    pub fn new() -> ImmutableGetErrorMessagesViewParams {
        ImmutableGetErrorMessagesViewParams {
            proxy: params_proxy(),
        }
    }

    // string of requestID
    pub fn request_id(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_REQUEST_ID))
    }
}

#[derive(Clone)]
pub struct MutableGetErrorMessagesViewParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetErrorMessagesViewParams {
    // string of requestID
    pub fn request_id(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_REQUEST_ID))
    }
}

#[derive(Clone)]
pub struct ImmutableGetOpenShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetOpenShopRequestParams {
    pub fn new() -> ImmutableGetOpenShopRequestParams {
        ImmutableGetOpenShopRequestParams {
            proxy: params_proxy(),
        }
    }

    // agendID of owner
    pub fn shop_owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableGetOpenShopRequestParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetOpenShopRequestParams {
    // agendID of owner
    pub fn shop_owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableGetRegisteredShopsFromOwnerParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetRegisteredShopsFromOwnerParams {
    pub fn new() -> ImmutableGetRegisteredShopsFromOwnerParams {
        ImmutableGetRegisteredShopsFromOwnerParams {
            proxy: params_proxy(),
        }
    }

    // agentID from owner
    pub fn shop_owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct MutableGetRegisteredShopsFromOwnerParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetRegisteredShopsFromOwnerParams {
    // agentID from owner
    pub fn shop_owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(PARAM_SHOP_OWNER))
    }
}

#[derive(Clone)]
pub struct ImmutableGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetShopStatisticsParams {
    pub fn new() -> ImmutableGetShopStatisticsParams {
        ImmutableGetShopStatisticsParams {
            proxy: params_proxy(),
        }
    }

    // name of the shop
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableGetShopStatisticsParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetShopStatisticsParams {
    // name of the shop
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct ImmutableGetSpecificProductsParams {
    pub(crate) proxy: Proxy,
}

impl ImmutableGetSpecificProductsParams {
    pub fn new() -> ImmutableGetSpecificProductsParams {
        ImmutableGetSpecificProductsParams {
            proxy: params_proxy(),
        }
    }

    // Name of Musician
    pub fn shop_name(&self) -> ScImmutableString {
        ScImmutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}

#[derive(Clone)]
pub struct MutableGetSpecificProductsParams {
    pub(crate) proxy: Proxy,
}

impl MutableGetSpecificProductsParams {
    // Name of Musician
    pub fn shop_name(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.root(PARAM_SHOP_NAME))
    }
}
