// Code generated by schema tool; DO NOT EDIT.

use std::collections::HashMap;

use wasmlib::*;

use crate::*;

pub struct RussfestEventHandlers {
    my_id: u32,
    russfest_handlers: HashMap<&'static str, fn(evt: &RussfestEventHandlers, dec: &mut WasmDecoder)>,

    test: Box<dyn Fn(&EventTest)>,
}

impl IEventHandlers for RussfestEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.russfest_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for RussfestEventHandlers {}
unsafe impl Sync for RussfestEventHandlers {}

impl RussfestEventHandlers {
    pub fn new() -> RussfestEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &RussfestEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("russfest.test", |e, m| { (e.test)(&EventTest::new(m)); });
        return RussfestEventHandlers {
            my_id: EventHandlers::generate_id(),
            russfest_handlers: handlers,
            test: Box::new(|_e| {}),
        };
    }

    pub fn on_russfest_test<F>(&mut self, handler: F)
        where F: Fn(&EventTest) + 'static {
        self.test = Box::new(handler);
    }
}

pub struct EventTest {
    pub timestamp: u64,
}

impl EventTest {
    pub fn new(dec: &mut WasmDecoder) -> EventTest {
        EventTest {
            timestamp: uint64_decode(dec),
        }
    }
}
