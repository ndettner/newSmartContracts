// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct MapStringToImmutableString {
    pub(crate) proxy: Proxy,
}

impl MapStringToImmutableString {
    pub fn get_string(&self, key: &str) -> ScImmutableString {
        ScImmutableString::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapStringToImmutableShop {
    pub(crate) proxy: Proxy,
}

impl MapStringToImmutableShop {
    pub fn get_shop(&self, key: &str) -> ImmutableShop {
        ImmutableShop { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ImmutableRussfestState {
    pub(crate) proxy: Proxy,
}

impl ImmutableRussfestState {
    pub fn new() -> ImmutableRussfestState {
        ImmutableRussfestState {
            proxy: state_proxy(),
        }
    }

    // amount of earnedMoney
    pub fn earned_money(&self) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.root(STATE_EARNED_MONEY))
    }

    // maps an request id to an error message
    pub fn error_messages(&self) -> MapStringToImmutableString {
        MapStringToImmutableString { proxy: self.proxy.root(STATE_ERROR_MESSAGES) }
    }

    // array of all musicians
    pub fn musicians(&self) -> ArrayOfImmutableMusician {
        ArrayOfImmutableMusician { proxy: self.proxy.root(STATE_MUSICIANS) }
    }

    // current owner of this smart contract
    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
    }

    // array of all products
    pub fn products(&self) -> ArrayOfImmutableProduct {
        ArrayOfImmutableProduct { proxy: self.proxy.root(STATE_PRODUCTS) }
    }

    // array of all Shopnames
    pub fn shopnames(&self) -> ArrayOfImmutableString {
        ArrayOfImmutableString { proxy: self.proxy.root(STATE_SHOPNAMES) }
    }

    // map of all Shops
    pub fn shops(&self) -> MapStringToImmutableShop {
        MapStringToImmutableShop { proxy: self.proxy.root(STATE_SHOPS) }
    }

    // ordered array of timeslots
    pub fn timeslots(&self) -> ArrayOfImmutableTimeslot {
        ArrayOfImmutableTimeslot { proxy: self.proxy.root(STATE_TIMESLOTS) }
    }
}

#[derive(Clone)]
pub struct MapStringToMutableString {
    pub(crate) proxy: Proxy,
}

impl MapStringToMutableString {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_string(&self, key: &str) -> ScMutableString {
        ScMutableString::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapStringToMutableShop {
    pub(crate) proxy: Proxy,
}

impl MapStringToMutableShop {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_shop(&self, key: &str) -> MutableShop {
        MutableShop { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MutableRussfestState {
    pub(crate) proxy: Proxy,
}

impl MutableRussfestState {
    pub fn new() -> MutableRussfestState {
        MutableRussfestState {
            proxy: state_proxy(),
        }
    }
    pub fn as_immutable(&self) -> ImmutableRussfestState {
        ImmutableRussfestState { proxy: self.proxy.root("") }
    }

    // amount of earnedMoney
    pub fn earned_money(&self) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.root(STATE_EARNED_MONEY))
    }

    // maps an request id to an error message
    pub fn error_messages(&self) -> MapStringToMutableString {
        MapStringToMutableString { proxy: self.proxy.root(STATE_ERROR_MESSAGES) }
    }

    // array of all musicians
    pub fn musicians(&self) -> ArrayOfMutableMusician {
        ArrayOfMutableMusician { proxy: self.proxy.root(STATE_MUSICIANS) }
    }

    // current owner of this smart contract
    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
    }

    // array of all products
    pub fn products(&self) -> ArrayOfMutableProduct {
        ArrayOfMutableProduct { proxy: self.proxy.root(STATE_PRODUCTS) }
    }

    // array of all Shopnames
    pub fn shopnames(&self) -> ArrayOfMutableString {
        ArrayOfMutableString { proxy: self.proxy.root(STATE_SHOPNAMES) }
    }

    // map of all Shops
    pub fn shops(&self) -> MapStringToMutableShop {
        MapStringToMutableShop { proxy: self.proxy.root(STATE_SHOPS) }
    }

    // ordered array of timeslots
    pub fn timeslots(&self) -> ArrayOfMutableTimeslot {
        ArrayOfMutableTimeslot { proxy: self.proxy.root(STATE_TIMESLOTS) }
    }
}
