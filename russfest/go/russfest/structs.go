// Code generated by schema tool; DO NOT EDIT.

package russfest

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type Musician struct {
	// Name of the musician
	Name string
	// Name of associated Shop
	Shop string
}

func MusicianFromBytes(buf []byte) *Musician {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Musician{}
	data.Name = wasmtypes.StringDecode(dec)
	data.Shop = wasmtypes.StringDecode(dec)
	dec.Close()
	return data
}

func (o *Musician) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.StringEncode(enc, o.Name)
	wasmtypes.StringEncode(enc, o.Shop)
	return enc.Buf()
}

type ImmutableMusician struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableMusician) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableMusician) Value() *Musician {
	return MusicianFromBytes(o.Proxy.Get())
}

type MutableMusician struct {
	Proxy wasmtypes.Proxy
}

func (o MutableMusician) Delete() {
	o.Proxy.Delete()
}

func (o MutableMusician) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableMusician) SetValue(value *Musician) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableMusician) Value() *Musician {
	return MusicianFromBytes(o.Proxy.Get())
}

type Product struct {
	// Associated Musician
	Musician    string
	// Price of product
	Price       uint64
	// type of Product e.g. Tshirt
	ProductType string
	// shopName
	ShopName    string
	// Available Stock
	Stock       uint64
}

func ProductFromBytes(buf []byte) *Product {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Product{}
	data.Musician    = wasmtypes.StringDecode(dec)
	data.Price       = wasmtypes.Uint64Decode(dec)
	data.ProductType = wasmtypes.StringDecode(dec)
	data.ShopName    = wasmtypes.StringDecode(dec)
	data.Stock       = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *Product) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.StringEncode(enc, o.Musician)
	wasmtypes.Uint64Encode(enc, o.Price)
	wasmtypes.StringEncode(enc, o.ProductType)
	wasmtypes.StringEncode(enc, o.ShopName)
	wasmtypes.Uint64Encode(enc, o.Stock)
	return enc.Buf()
}

type ImmutableProduct struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableProduct) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableProduct) Value() *Product {
	return ProductFromBytes(o.Proxy.Get())
}

type MutableProduct struct {
	Proxy wasmtypes.Proxy
}

func (o MutableProduct) Delete() {
	o.Proxy.Delete()
}

func (o MutableProduct) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableProduct) SetValue(value *Product) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableProduct) Value() *Product {
	return ProductFromBytes(o.Proxy.Get())
}

type ProductTemplate struct {
	// Associated Musician
	Musician    string
	// Price of product
	Price       uint64
	// type of Product e.g. Tshirt
	ProductType string
	// name of the Shop
	ShopName    string
}

func ProductTemplateFromBytes(buf []byte) *ProductTemplate {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &ProductTemplate{}
	data.Musician    = wasmtypes.StringDecode(dec)
	data.Price       = wasmtypes.Uint64Decode(dec)
	data.ProductType = wasmtypes.StringDecode(dec)
	data.ShopName    = wasmtypes.StringDecode(dec)
	dec.Close()
	return data
}

func (o *ProductTemplate) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.StringEncode(enc, o.Musician)
	wasmtypes.Uint64Encode(enc, o.Price)
	wasmtypes.StringEncode(enc, o.ProductType)
	wasmtypes.StringEncode(enc, o.ShopName)
	return enc.Buf()
}

type ImmutableProductTemplate struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableProductTemplate) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableProductTemplate) Value() *ProductTemplate {
	return ProductTemplateFromBytes(o.Proxy.Get())
}

type MutableProductTemplate struct {
	Proxy wasmtypes.Proxy
}

func (o MutableProductTemplate) Delete() {
	o.Proxy.Delete()
}

func (o MutableProductTemplate) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableProductTemplate) SetValue(value *ProductTemplate) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableProductTemplate) Value() *ProductTemplate {
	return ProductTemplateFromBytes(o.Proxy.Get())
}

type Shop struct {
	// Fee the Shop wants to pay
	Fee          uint64
	// Sets if Shop is registered or still has open request
	IsRegistered string
	// Name of the musician
	MusicianName string
	// hName of Shop
	ShopHname    wasmtypes.ScHname
	// Name of the Shop
	ShopName     string
	// Address of ShopOwner
	ShopOwner    wasmtypes.ScAgentID
}

func ShopFromBytes(buf []byte) *Shop {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Shop{}
	data.Fee          = wasmtypes.Uint64Decode(dec)
	data.IsRegistered = wasmtypes.StringDecode(dec)
	data.MusicianName = wasmtypes.StringDecode(dec)
	data.ShopHname    = wasmtypes.HnameDecode(dec)
	data.ShopName     = wasmtypes.StringDecode(dec)
	data.ShopOwner    = wasmtypes.AgentIDDecode(dec)
	dec.Close()
	return data
}

func (o *Shop) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.Uint64Encode(enc, o.Fee)
	wasmtypes.StringEncode(enc, o.IsRegistered)
	wasmtypes.StringEncode(enc, o.MusicianName)
	wasmtypes.HnameEncode(enc, o.ShopHname)
	wasmtypes.StringEncode(enc, o.ShopName)
	wasmtypes.AgentIDEncode(enc, o.ShopOwner)
	return enc.Buf()
}

type ImmutableShop struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableShop) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableShop) Value() *Shop {
	return ShopFromBytes(o.Proxy.Get())
}

type MutableShop struct {
	Proxy wasmtypes.Proxy
}

func (o MutableShop) Delete() {
	o.Proxy.Delete()
}

func (o MutableShop) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableShop) SetValue(value *Shop) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableShop) Value() *Shop {
	return ShopFromBytes(o.Proxy.Get())
}

type StatisticProduct struct {
	// id of product
	ID             uint64
	// Associated Musician
	Musician       string
	// Price of product
	Price          uint64
	// Index of production plant
	ProductionStep uint64
	// type of Product e.g. Tshirt
	ProductType    string
	// name of the Shop
	ShopName       string
	// Timestampt since last production step
	Timestamp      uint64
}

func StatisticProductFromBytes(buf []byte) *StatisticProduct {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &StatisticProduct{}
	data.ID             = wasmtypes.Uint64Decode(dec)
	data.Musician       = wasmtypes.StringDecode(dec)
	data.Price          = wasmtypes.Uint64Decode(dec)
	data.ProductionStep = wasmtypes.Uint64Decode(dec)
	data.ProductType    = wasmtypes.StringDecode(dec)
	data.ShopName       = wasmtypes.StringDecode(dec)
	data.Timestamp      = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *StatisticProduct) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.Uint64Encode(enc, o.ID)
	wasmtypes.StringEncode(enc, o.Musician)
	wasmtypes.Uint64Encode(enc, o.Price)
	wasmtypes.Uint64Encode(enc, o.ProductionStep)
	wasmtypes.StringEncode(enc, o.ProductType)
	wasmtypes.StringEncode(enc, o.ShopName)
	wasmtypes.Uint64Encode(enc, o.Timestamp)
	return enc.Buf()
}

type ImmutableStatisticProduct struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableStatisticProduct) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableStatisticProduct) Value() *StatisticProduct {
	return StatisticProductFromBytes(o.Proxy.Get())
}

type MutableStatisticProduct struct {
	Proxy wasmtypes.Proxy
}

func (o MutableStatisticProduct) Delete() {
	o.Proxy.Delete()
}

func (o MutableStatisticProduct) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableStatisticProduct) SetValue(value *StatisticProduct) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableStatisticProduct) Value() *StatisticProduct {
	return StatisticProductFromBytes(o.Proxy.Get())
}

type Timeslot struct {
	// enddtime of Timeslot
	End      uint64
	// name of the musician
	Musician string
	// starttime of Timeslot
	Start    uint64
}

func TimeslotFromBytes(buf []byte) *Timeslot {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Timeslot{}
	data.End      = wasmtypes.Uint64Decode(dec)
	data.Musician = wasmtypes.StringDecode(dec)
	data.Start    = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *Timeslot) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.Uint64Encode(enc, o.End)
	wasmtypes.StringEncode(enc, o.Musician)
	wasmtypes.Uint64Encode(enc, o.Start)
	return enc.Buf()
}

type ImmutableTimeslot struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableTimeslot) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableTimeslot) Value() *Timeslot {
	return TimeslotFromBytes(o.Proxy.Get())
}

type MutableTimeslot struct {
	Proxy wasmtypes.Proxy
}

func (o MutableTimeslot) Delete() {
	o.Proxy.Delete()
}

func (o MutableTimeslot) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableTimeslot) SetValue(value *Timeslot) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableTimeslot) Value() *Timeslot {
	return TimeslotFromBytes(o.Proxy.Get())
}
