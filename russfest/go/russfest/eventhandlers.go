// Code generated by schema tool; DO NOT EDIT.

package russfest

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var russfestHandlers = map[string]func(*RussfestEventHandlers, *wasmtypes.WasmDecoder){
	"russfest.test": func(evt *RussfestEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onRussfestTestThunk(dec) },
}

type RussfestEventHandlers struct {
	myID uint32
	test func(e *EventTest)
}

var _ wasmlib.IEventHandlers = new(RussfestEventHandlers)

func NewRussfestEventHandlers() *RussfestEventHandlers {
	return &RussfestEventHandlers{ myID: wasmlib.EventHandlersGenerateID() }
}

func (h *RussfestEventHandlers) CallHandler(topic string, dec *wasmtypes.WasmDecoder) {
	handler := russfestHandlers[topic]
	if handler != nil {
		handler(h, dec)
	}
}

func (h *RussfestEventHandlers) ID() uint32 {
	return h.myID
}

func (h *RussfestEventHandlers) OnRussfestTest(handler func(e *EventTest)) {
	h.test = handler
}

type EventTest struct {
	Timestamp uint64
}

func (h *RussfestEventHandlers) onRussfestTestThunk(dec *wasmtypes.WasmDecoder) {
	if h.test == nil {
		return
	}
	e := &EventTest{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	dec.Close()
	h.test(e)
}
