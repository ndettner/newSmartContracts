// Code generated by schema tool; DO NOT EDIT.

package russfest

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type AcceptShopCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAcceptShopParams
}

type AddMusicianCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddMusicianParams
}

type BuyMerchCall struct {
	Func   *wasmlib.ScFunc
	Params MutableBuyMerchParams
}

type CallCheckProductCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableCallCheckProductParams
	Results ImmutableCallCheckProductResults
}

type CallCreateNewProductCall struct {
	Func   *wasmlib.ScFunc
	Params MutableCallCreateNewProductParams
}

type CallPayStoreCall struct {
	Func   *wasmlib.ScFunc
	Params MutableCallPayStoreParams
}

type CallPingShopCall struct {
	Func    *wasmlib.ScFunc
	Results ImmutableCallPingShopResults
}

type CallRecieveProductsCall struct {
	Func    *wasmlib.ScFunc
	Results ImmutableCallRecieveProductsResults
}

type CallSendProductCall struct {
	Func   *wasmlib.ScFunc
}

type CancelShopRequestCall struct {
	Func   *wasmlib.ScFunc
	Params MutableCancelShopRequestParams
}

type DenyShopCall struct {
	Func   *wasmlib.ScFunc
	Params MutableDenyShopParams
}

type InitCall struct {
	Func   *wasmlib.ScInitFunc
	Params MutableInitParams
}

type RequestShopLicenceCall struct {
	Func   *wasmlib.ScFunc
	Params MutableRequestShopLicenceParams
}

type SetOwnerCall struct {
	Func   *wasmlib.ScFunc
	Params MutableSetOwnerParams
}

type UpdateDeniedShopRequestCall struct {
	Func   *wasmlib.ScFunc
	Params MutableUpdateDeniedShopRequestParams
}

type CallGetShopStatisticsCall struct {
	Func    *wasmlib.ScView
	Params  MutableCallGetShopStatisticsParams
	Results ImmutableCallGetShopStatisticsResults
}

type GetAgendIDCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetAgendIDResults
}

type GetAllOpenShopRequestsCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetAllOpenShopRequestsResults
}

type GetAllProductsCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetAllProductsResults
}

type GetAllRegisteredShopsCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetAllRegisteredShopsResults
}

type GetDeniedShopRequestsCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetDeniedShopRequestsParams
	Results ImmutableGetDeniedShopRequestsResults
}

type GetErrorMessagesViewCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetErrorMessagesViewParams
	Results ImmutableGetErrorMessagesViewResults
}

type GetFestivalEarningsCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetFestivalEarningsResults
}

type GetMusiciansCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetMusiciansResults
}

type GetMusiciansWithoutShopCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetMusiciansWithoutShopResults
}

type GetOpenShopRequestCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetOpenShopRequestParams
	Results ImmutableGetOpenShopRequestResults
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type GetRegisteredShopsFromOwnerCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetRegisteredShopsFromOwnerParams
	Results ImmutableGetRegisteredShopsFromOwnerResults
}

type GetShopStatisticsCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetShopStatisticsParams
	Results ImmutableGetShopStatisticsResults
}

type GetSpecificProductsCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetSpecificProductsParams
	Results ImmutableGetSpecificProductsResults
}

type GetTimeslotsCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetTimeslotsResults
}

type TestViewCall struct {
	Func    *wasmlib.ScView
	Results ImmutableTestViewResults
}

type TestViewSingleCall struct {
	Func    *wasmlib.ScView
	Results ImmutableTestViewSingleResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) AcceptShop(ctx wasmlib.ScFuncClientContext) *AcceptShopCall {
	f := &AcceptShopCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAcceptShop)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddMusician(ctx wasmlib.ScFuncClientContext) *AddMusicianCall {
	f := &AddMusicianCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddMusician)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) BuyMerch(ctx wasmlib.ScFuncClientContext) *BuyMerchCall {
	f := &BuyMerchCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncBuyMerch)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) CallCheckProduct(ctx wasmlib.ScFuncClientContext) *CallCheckProductCall {
	f := &CallCheckProductCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallCheckProduct)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.Proxy)
	return f
}

func (sc Funcs) CallCreateNewProduct(ctx wasmlib.ScFuncClientContext) *CallCreateNewProductCall {
	f := &CallCreateNewProductCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallCreateNewProduct)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) CallPayStore(ctx wasmlib.ScFuncClientContext) *CallPayStoreCall {
	f := &CallPayStoreCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallPayStore)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) CallPingShop(ctx wasmlib.ScFuncClientContext) *CallPingShopCall {
	f := &CallPingShopCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallPingShop)}
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.Proxy)
	return f
}

func (sc Funcs) CallRecieveProducts(ctx wasmlib.ScFuncClientContext) *CallRecieveProductsCall {
	f := &CallRecieveProductsCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallRecieveProducts)}
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.Proxy)
	return f
}

func (sc Funcs) CallSendProduct(ctx wasmlib.ScFuncClientContext) *CallSendProductCall {
	return &CallSendProductCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCallSendProduct)}
}

func (sc Funcs) CancelShopRequest(ctx wasmlib.ScFuncClientContext) *CancelShopRequestCall {
	f := &CancelShopRequestCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCancelShopRequest)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) DenyShop(ctx wasmlib.ScFuncClientContext) *DenyShopCall {
	f := &DenyShopCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncDenyShop)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Init(ctx wasmlib.ScFuncClientContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) RequestShopLicence(ctx wasmlib.ScFuncClientContext) *RequestShopLicenceCall {
	f := &RequestShopLicenceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncRequestShopLicence)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncClientContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) UpdateDeniedShopRequest(ctx wasmlib.ScFuncClientContext) *UpdateDeniedShopRequestCall {
	f := &UpdateDeniedShopRequestCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncUpdateDeniedShopRequest)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) CallGetShopStatistics(ctx wasmlib.ScViewClientContext) *CallGetShopStatisticsCall {
	f := &CallGetShopStatisticsCall{Func: wasmlib.NewScView(ctx, HScName, HViewCallGetShopStatistics)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetAgendID(ctx wasmlib.ScViewClientContext) *GetAgendIDCall {
	f := &GetAgendIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetAgendID)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetAllOpenShopRequests(ctx wasmlib.ScViewClientContext) *GetAllOpenShopRequestsCall {
	f := &GetAllOpenShopRequestsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetAllOpenShopRequests)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetAllProducts(ctx wasmlib.ScViewClientContext) *GetAllProductsCall {
	f := &GetAllProductsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetAllProducts)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetAllRegisteredShops(ctx wasmlib.ScViewClientContext) *GetAllRegisteredShopsCall {
	f := &GetAllRegisteredShopsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetAllRegisteredShops)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetDeniedShopRequests(ctx wasmlib.ScViewClientContext) *GetDeniedShopRequestsCall {
	f := &GetDeniedShopRequestsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetDeniedShopRequests)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetErrorMessagesView(ctx wasmlib.ScViewClientContext) *GetErrorMessagesViewCall {
	f := &GetErrorMessagesViewCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetErrorMessagesView)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetFestivalEarnings(ctx wasmlib.ScViewClientContext) *GetFestivalEarningsCall {
	f := &GetFestivalEarningsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetFestivalEarnings)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetMusicians(ctx wasmlib.ScViewClientContext) *GetMusiciansCall {
	f := &GetMusiciansCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetMusicians)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetMusiciansWithoutShop(ctx wasmlib.ScViewClientContext) *GetMusiciansWithoutShopCall {
	f := &GetMusiciansWithoutShopCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetMusiciansWithoutShop)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetOpenShopRequest(ctx wasmlib.ScViewClientContext) *GetOpenShopRequestCall {
	f := &GetOpenShopRequestCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOpenShopRequest)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewClientContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetRegisteredShopsFromOwner(ctx wasmlib.ScViewClientContext) *GetRegisteredShopsFromOwnerCall {
	f := &GetRegisteredShopsFromOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRegisteredShopsFromOwner)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetShopStatistics(ctx wasmlib.ScViewClientContext) *GetShopStatisticsCall {
	f := &GetShopStatisticsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetShopStatistics)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetSpecificProducts(ctx wasmlib.ScViewClientContext) *GetSpecificProductsCall {
	f := &GetSpecificProductsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetSpecificProducts)}
	f.Params.Proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) GetTimeslots(ctx wasmlib.ScViewClientContext) *GetTimeslotsCall {
	f := &GetTimeslotsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetTimeslots)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) TestView(ctx wasmlib.ScViewClientContext) *TestViewCall {
	f := &TestViewCall{Func: wasmlib.NewScView(ctx, HScName, HViewTestView)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}

func (sc Funcs) TestViewSingle(ctx wasmlib.ScViewClientContext) *TestViewSingleCall {
	f := &TestViewSingleCall{Func: wasmlib.NewScView(ctx, HScName, HViewTestViewSingle)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.Proxy)
	return f
}
