// Code generated by schema tool; DO NOT EDIT.

package russfestimpl

import (
	"test/go/russfest"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
)

var exportMap = wasmlib.ScExportMap{
	Names: []string{
		russfest.FuncAcceptShop,
		russfest.FuncAddMusician,
		russfest.FuncBuyMerch,
		russfest.FuncCallCheckProduct,
		russfest.FuncCallCreateNewProduct,
		russfest.FuncCallPayStore,
		russfest.FuncCallPingShop,
		russfest.FuncCallRecieveProducts,
		russfest.FuncCallSendProduct,
		russfest.FuncCancelShopRequest,
		russfest.FuncDenyShop,
		russfest.FuncInit,
		russfest.FuncRequestShopLicence,
		russfest.FuncSetOwner,
		russfest.FuncUpdateDeniedShopRequest,
		russfest.ViewCallGetShopStatistics,
		russfest.ViewGetAgendID,
		russfest.ViewGetAllOpenShopRequests,
		russfest.ViewGetAllProducts,
		russfest.ViewGetAllRegisteredShops,
		russfest.ViewGetDeniedShopRequests,
		russfest.ViewGetErrorMessagesView,
		russfest.ViewGetFestivalEarnings,
		russfest.ViewGetMusicians,
		russfest.ViewGetMusiciansWithoutShop,
		russfest.ViewGetOpenShopRequest,
		russfest.ViewGetOwner,
		russfest.ViewGetRegisteredShopsFromOwner,
		russfest.ViewGetShopStatistics,
		russfest.ViewGetSpecificProducts,
		russfest.ViewGetTimeslots,
		russfest.ViewTestView,
		russfest.ViewTestViewSingle,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
		funcAcceptShopThunk,
		funcAddMusicianThunk,
		funcBuyMerchThunk,
		funcCallCheckProductThunk,
		funcCallCreateNewProductThunk,
		funcCallPayStoreThunk,
		funcCallPingShopThunk,
		funcCallRecieveProductsThunk,
		funcCallSendProductThunk,
		funcCancelShopRequestThunk,
		funcDenyShopThunk,
		funcInitThunk,
		funcRequestShopLicenceThunk,
		funcSetOwnerThunk,
		funcUpdateDeniedShopRequestThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
		viewCallGetShopStatisticsThunk,
		viewGetAgendIDThunk,
		viewGetAllOpenShopRequestsThunk,
		viewGetAllProductsThunk,
		viewGetAllRegisteredShopsThunk,
		viewGetDeniedShopRequestsThunk,
		viewGetErrorMessagesViewThunk,
		viewGetFestivalEarningsThunk,
		viewGetMusiciansThunk,
		viewGetMusiciansWithoutShopThunk,
		viewGetOpenShopRequestThunk,
		viewGetOwnerThunk,
		viewGetRegisteredShopsFromOwnerThunk,
		viewGetShopStatisticsThunk,
		viewGetSpecificProductsThunk,
		viewGetTimeslotsThunk,
		viewTestViewThunk,
		viewTestViewSingleThunk,
	},
}

func OnDispatch(index int32) *wasmlib.ScExportMap {
	return exportMap.Dispatch(index)
}

type AcceptShopContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableAcceptShopParams
	State  russfest.MutableRussfestState
}

func funcAcceptShopThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcAcceptShop")
	f := &AcceptShopContext{
		Params: russfest.NewImmutableAcceptShopParams(),
		State:  russfest.NewMutableRussfestState(),
	}

	// only owner can accept Shop
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcAcceptShop(ctx, f)
	ctx.Log("russfest.funcAcceptShop ok")
}

type AddMusicianContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableAddMusicianParams
	State  russfest.MutableRussfestState
}

func funcAddMusicianThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcAddMusician")
	f := &AddMusicianContext{
		Params: russfest.NewImmutableAddMusicianParams(),
		State:  russfest.NewMutableRussfestState(),
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Name().Exists(), "missing mandatory param: name")
	funcAddMusician(ctx, f)
	ctx.Log("russfest.funcAddMusician ok")
}

type BuyMerchContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableBuyMerchParams
	State  russfest.MutableRussfestState
}

func funcBuyMerchThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcBuyMerch")
	f := &BuyMerchContext{
		Params: russfest.NewImmutableBuyMerchParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.Musician().Exists(), "missing mandatory param: musician")
	ctx.Require(f.Params.ProductType().Exists(), "missing mandatory param: productType")
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcBuyMerch(ctx, f)
	ctx.Log("russfest.funcBuyMerch ok")
}

type CallCheckProductContext struct {
	Events  russfest.RussfestEvents
	Params  russfest.ImmutableCallCheckProductParams
	Results russfest.MutableCallCheckProductResults
	State   russfest.MutableRussfestState
}

func funcCallCheckProductThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallCheckProduct")
	f := &CallCheckProductContext{
		Params:  russfest.NewImmutableCallCheckProductParams(),
		Results: russfest.NewMutableCallCheckProductResults(),
		State:   russfest.NewMutableRussfestState(),
	}
	funcCallCheckProduct(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.funcCallCheckProduct ok")
}

type CallCreateNewProductContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableCallCreateNewProductParams
	State  russfest.MutableRussfestState
}

func funcCallCreateNewProductThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallCreateNewProduct")
	f := &CallCreateNewProductContext{
		Params: russfest.NewImmutableCallCreateNewProductParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.MusicianName().Exists(), "missing mandatory param: musicianName")
	ctx.Require(f.Params.Price().Exists(), "missing mandatory param: price")
	ctx.Require(f.Params.ProductType().Exists(), "missing mandatory param: productType")
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcCallCreateNewProduct(ctx, f)
	ctx.Log("russfest.funcCallCreateNewProduct ok")
}

type CallPayStoreContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableCallPayStoreParams
	State  russfest.MutableRussfestState
}

func funcCallPayStoreThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallPayStore")
	f := &CallPayStoreContext{
		Params: russfest.NewImmutableCallPayStoreParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcCallPayStore(ctx, f)
	ctx.Log("russfest.funcCallPayStore ok")
}

type CallPingShopContext struct {
	Events  russfest.RussfestEvents
	Results russfest.MutableCallPingShopResults
	State   russfest.MutableRussfestState
}

func funcCallPingShopThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallPingShop")
	f := &CallPingShopContext{
		Results: russfest.NewMutableCallPingShopResults(),
		State:   russfest.NewMutableRussfestState(),
	}
	funcCallPingShop(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.funcCallPingShop ok")
}

type CallRecieveProductsContext struct {
	Events  russfest.RussfestEvents
	Results russfest.MutableCallRecieveProductsResults
	State   russfest.MutableRussfestState
}

func funcCallRecieveProductsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallRecieveProducts")
	f := &CallRecieveProductsContext{
		Results: russfest.NewMutableCallRecieveProductsResults(),
		State:   russfest.NewMutableRussfestState(),
	}
	funcCallRecieveProducts(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.funcCallRecieveProducts ok")
}

type CallSendProductContext struct {
	Events russfest.RussfestEvents
	State  russfest.MutableRussfestState
}

func funcCallSendProductThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCallSendProduct")
	f := &CallSendProductContext{
		State:  russfest.NewMutableRussfestState(),
	}
	funcCallSendProduct(ctx, f)
	ctx.Log("russfest.funcCallSendProduct ok")
}

type CancelShopRequestContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableCancelShopRequestParams
	State  russfest.MutableRussfestState
}

func funcCancelShopRequestThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcCancelShopRequest")
	f := &CancelShopRequestContext{
		Params: russfest.NewImmutableCancelShopRequestParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory param: name")
	funcCancelShopRequest(ctx, f)
	ctx.Log("russfest.funcCancelShopRequest ok")
}

type DenyShopContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableDenyShopParams
	State  russfest.MutableRussfestState
}

func funcDenyShopThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcDenyShop")
	f := &DenyShopContext{
		Params: russfest.NewImmutableDenyShopParams(),
		State:  russfest.NewMutableRussfestState(),
	}

	// only owner can accept Shop
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcDenyShop(ctx, f)
	ctx.Log("russfest.funcDenyShop ok")
}

type InitContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableInitParams
	State  russfest.MutableRussfestState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcInit")
	f := &InitContext{
		Params: russfest.NewImmutableInitParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	funcInit(ctx, f)
	ctx.Log("russfest.funcInit ok")
}

type RequestShopLicenceContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableRequestShopLicenceParams
	State  russfest.MutableRussfestState
}

func funcRequestShopLicenceThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcRequestShopLicence")
	f := &RequestShopLicenceContext{
		Params: russfest.NewImmutableRequestShopLicenceParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.Fee().Exists(), "missing mandatory param: fee")
	ctx.Require(f.Params.MusicianName().Exists(), "missing mandatory param: musicianName")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory param: name")
	ctx.Require(f.Params.ShopHname().Exists(), "missing mandatory param: shopHname")
	funcRequestShopLicence(ctx, f)
	ctx.Log("russfest.funcRequestShopLicence ok")
}

type SetOwnerContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableSetOwnerParams
	State  russfest.MutableRussfestState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcSetOwner")
	f := &SetOwnerContext{
		Params: russfest.NewImmutableSetOwnerParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.NewOwner().Exists(), "missing mandatory param: newOwner")
	funcSetOwner(ctx, f)
	ctx.Log("russfest.funcSetOwner ok")
}

type UpdateDeniedShopRequestContext struct {
	Events russfest.RussfestEvents
	Params russfest.ImmutableUpdateDeniedShopRequestParams
	State  russfest.MutableRussfestState
}

func funcUpdateDeniedShopRequestThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("russfest.funcUpdateDeniedShopRequest")
	f := &UpdateDeniedShopRequestContext{
		Params: russfest.NewImmutableUpdateDeniedShopRequestParams(),
		State:  russfest.NewMutableRussfestState(),
	}
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	funcUpdateDeniedShopRequest(ctx, f)
	ctx.Log("russfest.funcUpdateDeniedShopRequest ok")
}

type CallGetShopStatisticsContext struct {
	Params  russfest.ImmutableCallGetShopStatisticsParams
	Results russfest.MutableCallGetShopStatisticsResults
	State   russfest.ImmutableRussfestState
}

func viewCallGetShopStatisticsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewCallGetShopStatistics")
	f := &CallGetShopStatisticsContext{
		Params:  russfest.NewImmutableCallGetShopStatisticsParams(),
		Results: russfest.NewMutableCallGetShopStatisticsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	viewCallGetShopStatistics(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewCallGetShopStatistics ok")
}

type GetAgendIDContext struct {
	Results russfest.MutableGetAgendIDResults
	State   russfest.ImmutableRussfestState
}

func viewGetAgendIDThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetAgendID")
	f := &GetAgendIDContext{
		Results: russfest.NewMutableGetAgendIDResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetAgendID(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetAgendID ok")
}

type GetAllOpenShopRequestsContext struct {
	Results russfest.MutableGetAllOpenShopRequestsResults
	State   russfest.ImmutableRussfestState
}

func viewGetAllOpenShopRequestsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetAllOpenShopRequests")
	f := &GetAllOpenShopRequestsContext{
		Results: russfest.NewMutableGetAllOpenShopRequestsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetAllOpenShopRequests(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetAllOpenShopRequests ok")
}

type GetAllProductsContext struct {
	Results russfest.MutableGetAllProductsResults
	State   russfest.ImmutableRussfestState
}

func viewGetAllProductsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetAllProducts")
	f := &GetAllProductsContext{
		Results: russfest.NewMutableGetAllProductsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetAllProducts(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetAllProducts ok")
}

type GetAllRegisteredShopsContext struct {
	Results russfest.MutableGetAllRegisteredShopsResults
	State   russfest.ImmutableRussfestState
}

func viewGetAllRegisteredShopsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetAllRegisteredShops")
	f := &GetAllRegisteredShopsContext{
		Results: russfest.NewMutableGetAllRegisteredShopsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetAllRegisteredShops(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetAllRegisteredShops ok")
}

type GetDeniedShopRequestsContext struct {
	Params  russfest.ImmutableGetDeniedShopRequestsParams
	Results russfest.MutableGetDeniedShopRequestsResults
	State   russfest.ImmutableRussfestState
}

func viewGetDeniedShopRequestsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetDeniedShopRequests")
	f := &GetDeniedShopRequestsContext{
		Params:  russfest.NewImmutableGetDeniedShopRequestsParams(),
		Results: russfest.NewMutableGetDeniedShopRequestsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopOwner().Exists(), "missing mandatory param: shopOwner")
	viewGetDeniedShopRequests(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetDeniedShopRequests ok")
}

type GetErrorMessagesViewContext struct {
	Params  russfest.ImmutableGetErrorMessagesViewParams
	Results russfest.MutableGetErrorMessagesViewResults
	State   russfest.ImmutableRussfestState
}

func viewGetErrorMessagesViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetErrorMessagesView")
	f := &GetErrorMessagesViewContext{
		Params:  russfest.NewImmutableGetErrorMessagesViewParams(),
		Results: russfest.NewMutableGetErrorMessagesViewResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.RequestID().Exists(), "missing mandatory param: requestID")
	viewGetErrorMessagesView(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetErrorMessagesView ok")
}

type GetFestivalEarningsContext struct {
	Results russfest.MutableGetFestivalEarningsResults
	State   russfest.ImmutableRussfestState
}

func viewGetFestivalEarningsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetFestivalEarnings")
	f := &GetFestivalEarningsContext{
		Results: russfest.NewMutableGetFestivalEarningsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetFestivalEarnings(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetFestivalEarnings ok")
}

type GetMusiciansContext struct {
	Results russfest.MutableGetMusiciansResults
	State   russfest.ImmutableRussfestState
}

func viewGetMusiciansThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetMusicians")
	f := &GetMusiciansContext{
		Results: russfest.NewMutableGetMusiciansResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetMusicians(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetMusicians ok")
}

type GetMusiciansWithoutShopContext struct {
	Results russfest.MutableGetMusiciansWithoutShopResults
	State   russfest.ImmutableRussfestState
}

func viewGetMusiciansWithoutShopThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetMusiciansWithoutShop")
	f := &GetMusiciansWithoutShopContext{
		Results: russfest.NewMutableGetMusiciansWithoutShopResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetMusiciansWithoutShop(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetMusiciansWithoutShop ok")
}

type GetOpenShopRequestContext struct {
	Params  russfest.ImmutableGetOpenShopRequestParams
	Results russfest.MutableGetOpenShopRequestResults
	State   russfest.ImmutableRussfestState
}

func viewGetOpenShopRequestThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetOpenShopRequest")
	f := &GetOpenShopRequestContext{
		Params:  russfest.NewImmutableGetOpenShopRequestParams(),
		Results: russfest.NewMutableGetOpenShopRequestResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopOwner().Exists(), "missing mandatory param: shopOwner")
	viewGetOpenShopRequest(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetOpenShopRequest ok")
}

type GetOwnerContext struct {
	Results russfest.MutableGetOwnerResults
	State   russfest.ImmutableRussfestState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetOwner")
	f := &GetOwnerContext{
		Results: russfest.NewMutableGetOwnerResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetOwner(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetOwner ok")
}

type GetRegisteredShopsFromOwnerContext struct {
	Params  russfest.ImmutableGetRegisteredShopsFromOwnerParams
	Results russfest.MutableGetRegisteredShopsFromOwnerResults
	State   russfest.ImmutableRussfestState
}

func viewGetRegisteredShopsFromOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetRegisteredShopsFromOwner")
	f := &GetRegisteredShopsFromOwnerContext{
		Params:  russfest.NewImmutableGetRegisteredShopsFromOwnerParams(),
		Results: russfest.NewMutableGetRegisteredShopsFromOwnerResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopOwner().Exists(), "missing mandatory param: shopOwner")
	viewGetRegisteredShopsFromOwner(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetRegisteredShopsFromOwner ok")
}

type GetShopStatisticsContext struct {
	Params  russfest.ImmutableGetShopStatisticsParams
	Results russfest.MutableGetShopStatisticsResults
	State   russfest.ImmutableRussfestState
}

func viewGetShopStatisticsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetShopStatistics")
	f := &GetShopStatisticsContext{
		Params:  russfest.NewImmutableGetShopStatisticsParams(),
		Results: russfest.NewMutableGetShopStatisticsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	viewGetShopStatistics(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetShopStatistics ok")
}

type GetSpecificProductsContext struct {
	Params  russfest.ImmutableGetSpecificProductsParams
	Results russfest.MutableGetSpecificProductsResults
	State   russfest.ImmutableRussfestState
}

func viewGetSpecificProductsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetSpecificProducts")
	f := &GetSpecificProductsContext{
		Params:  russfest.NewImmutableGetSpecificProductsParams(),
		Results: russfest.NewMutableGetSpecificProductsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	ctx.Require(f.Params.ShopName().Exists(), "missing mandatory param: shopName")
	viewGetSpecificProducts(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetSpecificProducts ok")
}

type GetTimeslotsContext struct {
	Results russfest.MutableGetTimeslotsResults
	State   russfest.ImmutableRussfestState
}

func viewGetTimeslotsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewGetTimeslots")
	f := &GetTimeslotsContext{
		Results: russfest.NewMutableGetTimeslotsResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewGetTimeslots(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewGetTimeslots ok")
}

type TestViewContext struct {
	Results russfest.MutableTestViewResults
	State   russfest.ImmutableRussfestState
}

func viewTestViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewTestView")
	f := &TestViewContext{
		Results: russfest.NewMutableTestViewResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewTestView(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewTestView ok")
}

type TestViewSingleContext struct {
	Results russfest.MutableTestViewSingleResults
	State   russfest.ImmutableRussfestState
}

func viewTestViewSingleThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("russfest.viewTestViewSingle")
	f := &TestViewSingleContext{
		Results: russfest.NewMutableTestViewSingleResults(),
		State:   russfest.NewImmutableRussfestState(),
	}
	viewTestViewSingle(ctx, f)
	ctx.Results(f.Results.Proxy)
	ctx.Log("russfest.viewTestViewSingle ok")
}
