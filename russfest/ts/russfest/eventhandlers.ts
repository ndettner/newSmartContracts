// Code generated by schema tool; DO NOT EDIT.

import * as wasmlib from 'wasmlib';
import * as wasmtypes from 'wasmlib/wasmtypes';

export class RussfestEventHandlers implements wasmlib.IEventHandlers {
    private myID: u32;
    private russfestHandlers: Map<string, (evt: RussfestEventHandlers, dec: wasmlib.WasmDecoder) => void> = new Map();

    /* eslint-disable @typescript-eslint/no-empty-function */
    test: (evt: EventTest) => void = () => {};
    /* eslint-enable @typescript-eslint/no-empty-function */

    public constructor() {
        this.myID = wasmlib.eventHandlersGenerateID();
        this.russfestHandlers.set('russfest.test', (evt: RussfestEventHandlers, dec: wasmlib.WasmDecoder) => evt.test(new EventTest(dec)));
    }

    public callHandler(topic: string, dec: wasmlib.WasmDecoder): void {
        const handler = this.russfestHandlers.get(topic);
        if (handler) {
            handler(this, dec);
        }
    }

    public id(): u32 {
        return this.myID;
    }

    public onRussfestTest(handler: (evt: EventTest) => void): void {
        this.test = handler;
    }
}

export class EventTest {
    public readonly timestamp: u64;

    public constructor(dec: wasmlib.WasmDecoder) {
        this.timestamp = wasmtypes.uint64Decode(dec);
        dec.close();
    }
}
