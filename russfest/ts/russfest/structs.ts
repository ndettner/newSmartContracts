// Code generated by schema tool; DO NOT EDIT.

import * as wasmtypes from 'wasmlib/wasmtypes';

export class Musician {
    // Name of the musician
    name : string = '';
    // Name of associated Shop
    shop : string = '';

    static fromBytes(buf: Uint8Array): Musician {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new Musician();
        data.name = wasmtypes.stringDecode(dec);
        data.shop = wasmtypes.stringDecode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.stringEncode(enc, this.name);
        wasmtypes.stringEncode(enc, this.shop);
        return enc.buf();
    }
}

export class ImmutableMusician extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): Musician {
        return Musician.fromBytes(this.proxy.get());
    }
}

export class MutableMusician extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: Musician): void {
        this.proxy.set(value.bytes());
    }

    value(): Musician {
        return Musician.fromBytes(this.proxy.get());
    }
}

export class Product {
    // Associated Musician
    musician    : string = '';
    // Price of product
    price       : u64 = 0;
    // type of Product e.g. Tshirt
    productType : string = '';
    // shopName
    shopName    : string = '';
    // Available Stock
    stock       : u64 = 0;

    static fromBytes(buf: Uint8Array): Product {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new Product();
        data.musician    = wasmtypes.stringDecode(dec);
        data.price       = wasmtypes.uint64Decode(dec);
        data.productType = wasmtypes.stringDecode(dec);
        data.shopName    = wasmtypes.stringDecode(dec);
        data.stock       = wasmtypes.uint64Decode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.stringEncode(enc, this.musician);
        wasmtypes.uint64Encode(enc, this.price);
        wasmtypes.stringEncode(enc, this.productType);
        wasmtypes.stringEncode(enc, this.shopName);
        wasmtypes.uint64Encode(enc, this.stock);
        return enc.buf();
    }
}

export class ImmutableProduct extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): Product {
        return Product.fromBytes(this.proxy.get());
    }
}

export class MutableProduct extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: Product): void {
        this.proxy.set(value.bytes());
    }

    value(): Product {
        return Product.fromBytes(this.proxy.get());
    }
}

export class ProductTemplate {
    // Associated Musician
    musician    : string = '';
    // Price of product
    price       : u64 = 0;
    // type of Product e.g. Tshirt
    productType : string = '';
    // name of the Shop
    shopName    : string = '';

    static fromBytes(buf: Uint8Array): ProductTemplate {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new ProductTemplate();
        data.musician    = wasmtypes.stringDecode(dec);
        data.price       = wasmtypes.uint64Decode(dec);
        data.productType = wasmtypes.stringDecode(dec);
        data.shopName    = wasmtypes.stringDecode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.stringEncode(enc, this.musician);
        wasmtypes.uint64Encode(enc, this.price);
        wasmtypes.stringEncode(enc, this.productType);
        wasmtypes.stringEncode(enc, this.shopName);
        return enc.buf();
    }
}

export class ImmutableProductTemplate extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): ProductTemplate {
        return ProductTemplate.fromBytes(this.proxy.get());
    }
}

export class MutableProductTemplate extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: ProductTemplate): void {
        this.proxy.set(value.bytes());
    }

    value(): ProductTemplate {
        return ProductTemplate.fromBytes(this.proxy.get());
    }
}

export class Shop {
    // Fee the Shop wants to pay
    fee          : u64 = 0;
    // Sets if Shop is registered or still has open request
    isRegistered : string = '';
    // Name of the musician
    musicianName : string = '';
    // hName of Shop
    shopHname    : wasmtypes.ScHname = new wasmtypes.ScHname(0);
    // Name of the Shop
    shopName     : string = '';
    // Address of ShopOwner
    shopOwner    : wasmtypes.ScAgentID = wasmtypes.agentIDFromBytes(null);

    static fromBytes(buf: Uint8Array): Shop {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new Shop();
        data.fee          = wasmtypes.uint64Decode(dec);
        data.isRegistered = wasmtypes.stringDecode(dec);
        data.musicianName = wasmtypes.stringDecode(dec);
        data.shopHname    = wasmtypes.hnameDecode(dec);
        data.shopName     = wasmtypes.stringDecode(dec);
        data.shopOwner    = wasmtypes.agentIDDecode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.uint64Encode(enc, this.fee);
        wasmtypes.stringEncode(enc, this.isRegistered);
        wasmtypes.stringEncode(enc, this.musicianName);
        wasmtypes.hnameEncode(enc, this.shopHname);
        wasmtypes.stringEncode(enc, this.shopName);
        wasmtypes.agentIDEncode(enc, this.shopOwner);
        return enc.buf();
    }
}

export class ImmutableShop extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): Shop {
        return Shop.fromBytes(this.proxy.get());
    }
}

export class MutableShop extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: Shop): void {
        this.proxy.set(value.bytes());
    }

    value(): Shop {
        return Shop.fromBytes(this.proxy.get());
    }
}

export class StatisticProduct {
    // id of product
    id             : u64 = 0;
    // Associated Musician
    musician       : string = '';
    // Price of product
    price          : u64 = 0;
    // Index of production plant
    productionStep : u64 = 0;
    // type of Product e.g. Tshirt
    productType    : string = '';
    // name of the Shop
    shopName       : string = '';
    // Timestampt since last production step
    timestamp      : u64 = 0;

    static fromBytes(buf: Uint8Array): StatisticProduct {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new StatisticProduct();
        data.id             = wasmtypes.uint64Decode(dec);
        data.musician       = wasmtypes.stringDecode(dec);
        data.price          = wasmtypes.uint64Decode(dec);
        data.productionStep = wasmtypes.uint64Decode(dec);
        data.productType    = wasmtypes.stringDecode(dec);
        data.shopName       = wasmtypes.stringDecode(dec);
        data.timestamp      = wasmtypes.uint64Decode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.uint64Encode(enc, this.id);
        wasmtypes.stringEncode(enc, this.musician);
        wasmtypes.uint64Encode(enc, this.price);
        wasmtypes.uint64Encode(enc, this.productionStep);
        wasmtypes.stringEncode(enc, this.productType);
        wasmtypes.stringEncode(enc, this.shopName);
        wasmtypes.uint64Encode(enc, this.timestamp);
        return enc.buf();
    }
}

export class ImmutableStatisticProduct extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): StatisticProduct {
        return StatisticProduct.fromBytes(this.proxy.get());
    }
}

export class MutableStatisticProduct extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: StatisticProduct): void {
        this.proxy.set(value.bytes());
    }

    value(): StatisticProduct {
        return StatisticProduct.fromBytes(this.proxy.get());
    }
}

export class Timeslot {
    // enddtime of Timeslot
    end      : u64 = 0;
    // name of the musician
    musician : string = '';
    // starttime of Timeslot
    start    : u64 = 0;

    static fromBytes(buf: Uint8Array): Timeslot {
        const dec = new wasmtypes.WasmDecoder(buf);
        const data = new Timeslot();
        data.end      = wasmtypes.uint64Decode(dec);
        data.musician = wasmtypes.stringDecode(dec);
        data.start    = wasmtypes.uint64Decode(dec);
        dec.close();
        return data;
    }

    bytes(): Uint8Array {
        const enc = new wasmtypes.WasmEncoder();
        wasmtypes.uint64Encode(enc, this.end);
        wasmtypes.stringEncode(enc, this.musician);
        wasmtypes.uint64Encode(enc, this.start);
        return enc.buf();
    }
}

export class ImmutableTimeslot extends wasmtypes.ScProxy {

    exists(): bool {
        return this.proxy.exists();
    }

    value(): Timeslot {
        return Timeslot.fromBytes(this.proxy.get());
    }
}

export class MutableTimeslot extends wasmtypes.ScProxy {

    delete(): void {
        this.proxy.delete();
    }

    exists(): bool {
        return this.proxy.exists();
    }

    setValue(value: Timeslot): void {
        this.proxy.set(value.bytes());
    }

    value(): Timeslot {
        return Timeslot.fromBytes(this.proxy.get());
    }
}
