// Code generated by schema tool; DO NOT EDIT.

import * as wasmlib from 'wasmlib';
import * as sc from './index';

export class AcceptShopCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableAcceptShopParams = new sc.MutableAcceptShopParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAcceptShop);
    }
}

export class AcceptShopContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableAcceptShopParams = new sc.ImmutableAcceptShopParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class AddMusicianCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableAddMusicianParams = new sc.MutableAddMusicianParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddMusician);
    }
}

export class AddMusicianContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableAddMusicianParams = new sc.ImmutableAddMusicianParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class BuyMerchCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableBuyMerchParams = new sc.MutableBuyMerchParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncBuyMerch);
    }
}

export class BuyMerchContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableBuyMerchParams = new sc.ImmutableBuyMerchParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallCheckProductCall {
    func:    wasmlib.ScFunc;
    params:  sc.MutableCallCheckProductParams = new sc.MutableCallCheckProductParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableCallCheckProductResults = new sc.ImmutableCallCheckProductResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallCheckProduct);
    }
}

export class CallCheckProductContext {
    events:  sc.RussfestEvents = new sc.RussfestEvents();
    params:  sc.ImmutableCallCheckProductParams = new sc.ImmutableCallCheckProductParams(wasmlib.paramsProxy());
    results: sc.MutableCallCheckProductResults = new sc.MutableCallCheckProductResults(wasmlib.ScView.nilProxy);
    state:   sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallCreateNewProductCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableCallCreateNewProductParams = new sc.MutableCallCreateNewProductParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallCreateNewProduct);
    }
}

export class CallCreateNewProductContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableCallCreateNewProductParams = new sc.ImmutableCallCreateNewProductParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallPayStoreCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableCallPayStoreParams = new sc.MutableCallPayStoreParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallPayStore);
    }
}

export class CallPayStoreContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableCallPayStoreParams = new sc.ImmutableCallPayStoreParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallPingShopCall {
    func:    wasmlib.ScFunc;
    results: sc.ImmutableCallPingShopResults = new sc.ImmutableCallPingShopResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallPingShop);
    }
}

export class CallPingShopContext {
    events:  sc.RussfestEvents = new sc.RussfestEvents();
    results: sc.MutableCallPingShopResults = new sc.MutableCallPingShopResults(wasmlib.ScView.nilProxy);
    state:   sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallRecieveProductsCall {
    func:    wasmlib.ScFunc;
    results: sc.ImmutableCallRecieveProductsResults = new sc.ImmutableCallRecieveProductsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallRecieveProducts);
    }
}

export class CallRecieveProductsContext {
    events:  sc.RussfestEvents = new sc.RussfestEvents();
    results: sc.MutableCallRecieveProductsResults = new sc.MutableCallRecieveProductsResults(wasmlib.ScView.nilProxy);
    state:   sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallSendProductCall {
    func:   wasmlib.ScFunc;

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCallSendProduct);
    }
}

export class CallSendProductContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CancelShopRequestCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableCancelShopRequestParams = new sc.MutableCancelShopRequestParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncCancelShopRequest);
    }
}

export class CancelShopRequestContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableCancelShopRequestParams = new sc.ImmutableCancelShopRequestParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class DenyShopCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableDenyShopParams = new sc.MutableDenyShopParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncDenyShop);
    }
}

export class DenyShopContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableDenyShopParams = new sc.ImmutableDenyShopParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class InitCall {
    func:   wasmlib.ScInitFunc;
    params: sc.MutableInitParams = new sc.MutableInitParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScInitFunc(ctx, sc.HScName, sc.HFuncInit);
    }
}

export class InitContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableInitParams = new sc.ImmutableInitParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class RequestShopLicenceCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableRequestShopLicenceParams = new sc.MutableRequestShopLicenceParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncRequestShopLicence);
    }
}

export class RequestShopLicenceContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableRequestShopLicenceParams = new sc.ImmutableRequestShopLicenceParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class SetOwnerCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncSetOwner);
    }
}

export class SetOwnerContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class UpdateDeniedShopRequestCall {
    func:   wasmlib.ScFunc;
    params: sc.MutableUpdateDeniedShopRequestParams = new sc.MutableUpdateDeniedShopRequestParams(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScFuncClientContext) {
        this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncUpdateDeniedShopRequest);
    }
}

export class UpdateDeniedShopRequestContext {
    events: sc.RussfestEvents = new sc.RussfestEvents();
    params: sc.ImmutableUpdateDeniedShopRequestParams = new sc.ImmutableUpdateDeniedShopRequestParams(wasmlib.paramsProxy());
    state:  sc.MutableRussfestState = new sc.MutableRussfestState(wasmlib.ScState.proxy());
}

export class CallGetShopStatisticsCall {
    func:    wasmlib.ScView;
    params:  sc.MutableCallGetShopStatisticsParams = new sc.MutableCallGetShopStatisticsParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableCallGetShopStatisticsResults = new sc.ImmutableCallGetShopStatisticsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCallGetShopStatistics);
    }
}

export class CallGetShopStatisticsContext {
    params:  sc.ImmutableCallGetShopStatisticsParams = new sc.ImmutableCallGetShopStatisticsParams(wasmlib.paramsProxy());
    results: sc.MutableCallGetShopStatisticsResults = new sc.MutableCallGetShopStatisticsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetAgendIDCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetAgendIDResults = new sc.ImmutableGetAgendIDResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetAgendID);
    }
}

export class GetAgendIDContext {
    results: sc.MutableGetAgendIDResults = new sc.MutableGetAgendIDResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetAllOpenShopRequestsCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetAllOpenShopRequestsResults = new sc.ImmutableGetAllOpenShopRequestsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetAllOpenShopRequests);
    }
}

export class GetAllOpenShopRequestsContext {
    results: sc.MutableGetAllOpenShopRequestsResults = new sc.MutableGetAllOpenShopRequestsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetAllProductsCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetAllProductsResults = new sc.ImmutableGetAllProductsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetAllProducts);
    }
}

export class GetAllProductsContext {
    results: sc.MutableGetAllProductsResults = new sc.MutableGetAllProductsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetAllRegisteredShopsCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetAllRegisteredShopsResults = new sc.ImmutableGetAllRegisteredShopsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetAllRegisteredShops);
    }
}

export class GetAllRegisteredShopsContext {
    results: sc.MutableGetAllRegisteredShopsResults = new sc.MutableGetAllRegisteredShopsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetDeniedShopRequestsCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetDeniedShopRequestsParams = new sc.MutableGetDeniedShopRequestsParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetDeniedShopRequestsResults = new sc.ImmutableGetDeniedShopRequestsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetDeniedShopRequests);
    }
}

export class GetDeniedShopRequestsContext {
    params:  sc.ImmutableGetDeniedShopRequestsParams = new sc.ImmutableGetDeniedShopRequestsParams(wasmlib.paramsProxy());
    results: sc.MutableGetDeniedShopRequestsResults = new sc.MutableGetDeniedShopRequestsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetErrorMessagesViewCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetErrorMessagesViewParams = new sc.MutableGetErrorMessagesViewParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetErrorMessagesViewResults = new sc.ImmutableGetErrorMessagesViewResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetErrorMessagesView);
    }
}

export class GetErrorMessagesViewContext {
    params:  sc.ImmutableGetErrorMessagesViewParams = new sc.ImmutableGetErrorMessagesViewParams(wasmlib.paramsProxy());
    results: sc.MutableGetErrorMessagesViewResults = new sc.MutableGetErrorMessagesViewResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetFestivalEarningsCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetFestivalEarningsResults = new sc.ImmutableGetFestivalEarningsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetFestivalEarnings);
    }
}

export class GetFestivalEarningsContext {
    results: sc.MutableGetFestivalEarningsResults = new sc.MutableGetFestivalEarningsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetMusiciansCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetMusiciansResults = new sc.ImmutableGetMusiciansResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetMusicians);
    }
}

export class GetMusiciansContext {
    results: sc.MutableGetMusiciansResults = new sc.MutableGetMusiciansResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetMusiciansWithoutShopCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetMusiciansWithoutShopResults = new sc.ImmutableGetMusiciansWithoutShopResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetMusiciansWithoutShop);
    }
}

export class GetMusiciansWithoutShopContext {
    results: sc.MutableGetMusiciansWithoutShopResults = new sc.MutableGetMusiciansWithoutShopResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetOpenShopRequestCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetOpenShopRequestParams = new sc.MutableGetOpenShopRequestParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetOpenShopRequestResults = new sc.ImmutableGetOpenShopRequestResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetOpenShopRequest);
    }
}

export class GetOpenShopRequestContext {
    params:  sc.ImmutableGetOpenShopRequestParams = new sc.ImmutableGetOpenShopRequestParams(wasmlib.paramsProxy());
    results: sc.MutableGetOpenShopRequestResults = new sc.MutableGetOpenShopRequestResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetOwnerCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetOwnerResults = new sc.ImmutableGetOwnerResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetOwner);
    }
}

export class GetOwnerContext {
    results: sc.MutableGetOwnerResults = new sc.MutableGetOwnerResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetRegisteredShopsFromOwnerCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetRegisteredShopsFromOwnerParams = new sc.MutableGetRegisteredShopsFromOwnerParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetRegisteredShopsFromOwnerResults = new sc.ImmutableGetRegisteredShopsFromOwnerResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetRegisteredShopsFromOwner);
    }
}

export class GetRegisteredShopsFromOwnerContext {
    params:  sc.ImmutableGetRegisteredShopsFromOwnerParams = new sc.ImmutableGetRegisteredShopsFromOwnerParams(wasmlib.paramsProxy());
    results: sc.MutableGetRegisteredShopsFromOwnerResults = new sc.MutableGetRegisteredShopsFromOwnerResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetShopStatisticsCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetShopStatisticsParams = new sc.MutableGetShopStatisticsParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetShopStatisticsResults = new sc.ImmutableGetShopStatisticsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetShopStatistics);
    }
}

export class GetShopStatisticsContext {
    params:  sc.ImmutableGetShopStatisticsParams = new sc.ImmutableGetShopStatisticsParams(wasmlib.paramsProxy());
    results: sc.MutableGetShopStatisticsResults = new sc.MutableGetShopStatisticsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetSpecificProductsCall {
    func:    wasmlib.ScView;
    params:  sc.MutableGetSpecificProductsParams = new sc.MutableGetSpecificProductsParams(wasmlib.ScView.nilProxy);
    results: sc.ImmutableGetSpecificProductsResults = new sc.ImmutableGetSpecificProductsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetSpecificProducts);
    }
}

export class GetSpecificProductsContext {
    params:  sc.ImmutableGetSpecificProductsParams = new sc.ImmutableGetSpecificProductsParams(wasmlib.paramsProxy());
    results: sc.MutableGetSpecificProductsResults = new sc.MutableGetSpecificProductsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class GetTimeslotsCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableGetTimeslotsResults = new sc.ImmutableGetTimeslotsResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetTimeslots);
    }
}

export class GetTimeslotsContext {
    results: sc.MutableGetTimeslotsResults = new sc.MutableGetTimeslotsResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class TestViewCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableTestViewResults = new sc.ImmutableTestViewResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewTestView);
    }
}

export class TestViewContext {
    results: sc.MutableTestViewResults = new sc.MutableTestViewResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class TestViewSingleCall {
    func:    wasmlib.ScView;
    results: sc.ImmutableTestViewSingleResults = new sc.ImmutableTestViewSingleResults(wasmlib.ScView.nilProxy);

    public constructor(ctx: wasmlib.ScViewClientContext) {
        this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewTestViewSingle);
    }
}

export class TestViewSingleContext {
    results: sc.MutableTestViewSingleResults = new sc.MutableTestViewSingleResults(wasmlib.ScView.nilProxy);
    state:   sc.ImmutableRussfestState = new sc.ImmutableRussfestState(wasmlib.ScState.proxy());
}

export class ScFuncs {
    static acceptShop(ctx: wasmlib.ScFuncClientContext): AcceptShopCall {
        const f = new AcceptShopCall(ctx);
        f.params = new sc.MutableAcceptShopParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static addMusician(ctx: wasmlib.ScFuncClientContext): AddMusicianCall {
        const f = new AddMusicianCall(ctx);
        f.params = new sc.MutableAddMusicianParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static buyMerch(ctx: wasmlib.ScFuncClientContext): BuyMerchCall {
        const f = new BuyMerchCall(ctx);
        f.params = new sc.MutableBuyMerchParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static callCheckProduct(ctx: wasmlib.ScFuncClientContext): CallCheckProductCall {
        const f = new CallCheckProductCall(ctx);
        f.params = new sc.MutableCallCheckProductParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableCallCheckProductResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static callCreateNewProduct(ctx: wasmlib.ScFuncClientContext): CallCreateNewProductCall {
        const f = new CallCreateNewProductCall(ctx);
        f.params = new sc.MutableCallCreateNewProductParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static callPayStore(ctx: wasmlib.ScFuncClientContext): CallPayStoreCall {
        const f = new CallPayStoreCall(ctx);
        f.params = new sc.MutableCallPayStoreParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static callPingShop(ctx: wasmlib.ScFuncClientContext): CallPingShopCall {
        const f = new CallPingShopCall(ctx);
        f.results = new sc.ImmutableCallPingShopResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static callRecieveProducts(ctx: wasmlib.ScFuncClientContext): CallRecieveProductsCall {
        const f = new CallRecieveProductsCall(ctx);
        f.results = new sc.ImmutableCallRecieveProductsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static callSendProduct(ctx: wasmlib.ScFuncClientContext): CallSendProductCall {
        return new CallSendProductCall(ctx);
    }

    static cancelShopRequest(ctx: wasmlib.ScFuncClientContext): CancelShopRequestCall {
        const f = new CancelShopRequestCall(ctx);
        f.params = new sc.MutableCancelShopRequestParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static denyShop(ctx: wasmlib.ScFuncClientContext): DenyShopCall {
        const f = new DenyShopCall(ctx);
        f.params = new sc.MutableDenyShopParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static init(ctx: wasmlib.ScFuncClientContext): InitCall {
        const f = new InitCall(ctx);
        f.params = new sc.MutableInitParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static requestShopLicence(ctx: wasmlib.ScFuncClientContext): RequestShopLicenceCall {
        const f = new RequestShopLicenceCall(ctx);
        f.params = new sc.MutableRequestShopLicenceParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static setOwner(ctx: wasmlib.ScFuncClientContext): SetOwnerCall {
        const f = new SetOwnerCall(ctx);
        f.params = new sc.MutableSetOwnerParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static updateDeniedShopRequest(ctx: wasmlib.ScFuncClientContext): UpdateDeniedShopRequestCall {
        const f = new UpdateDeniedShopRequestCall(ctx);
        f.params = new sc.MutableUpdateDeniedShopRequestParams(wasmlib.newCallParamsProxy(f.func));
        return f;
    }

    static callGetShopStatistics(ctx: wasmlib.ScViewClientContext): CallGetShopStatisticsCall {
        const f = new CallGetShopStatisticsCall(ctx);
        f.params = new sc.MutableCallGetShopStatisticsParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableCallGetShopStatisticsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getAgendID(ctx: wasmlib.ScViewClientContext): GetAgendIDCall {
        const f = new GetAgendIDCall(ctx);
        f.results = new sc.ImmutableGetAgendIDResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getAllOpenShopRequests(ctx: wasmlib.ScViewClientContext): GetAllOpenShopRequestsCall {
        const f = new GetAllOpenShopRequestsCall(ctx);
        f.results = new sc.ImmutableGetAllOpenShopRequestsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getAllProducts(ctx: wasmlib.ScViewClientContext): GetAllProductsCall {
        const f = new GetAllProductsCall(ctx);
        f.results = new sc.ImmutableGetAllProductsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getAllRegisteredShops(ctx: wasmlib.ScViewClientContext): GetAllRegisteredShopsCall {
        const f = new GetAllRegisteredShopsCall(ctx);
        f.results = new sc.ImmutableGetAllRegisteredShopsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getDeniedShopRequests(ctx: wasmlib.ScViewClientContext): GetDeniedShopRequestsCall {
        const f = new GetDeniedShopRequestsCall(ctx);
        f.params = new sc.MutableGetDeniedShopRequestsParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetDeniedShopRequestsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getErrorMessagesView(ctx: wasmlib.ScViewClientContext): GetErrorMessagesViewCall {
        const f = new GetErrorMessagesViewCall(ctx);
        f.params = new sc.MutableGetErrorMessagesViewParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetErrorMessagesViewResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getFestivalEarnings(ctx: wasmlib.ScViewClientContext): GetFestivalEarningsCall {
        const f = new GetFestivalEarningsCall(ctx);
        f.results = new sc.ImmutableGetFestivalEarningsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getMusicians(ctx: wasmlib.ScViewClientContext): GetMusiciansCall {
        const f = new GetMusiciansCall(ctx);
        f.results = new sc.ImmutableGetMusiciansResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getMusiciansWithoutShop(ctx: wasmlib.ScViewClientContext): GetMusiciansWithoutShopCall {
        const f = new GetMusiciansWithoutShopCall(ctx);
        f.results = new sc.ImmutableGetMusiciansWithoutShopResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getOpenShopRequest(ctx: wasmlib.ScViewClientContext): GetOpenShopRequestCall {
        const f = new GetOpenShopRequestCall(ctx);
        f.params = new sc.MutableGetOpenShopRequestParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetOpenShopRequestResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getOwner(ctx: wasmlib.ScViewClientContext): GetOwnerCall {
        const f = new GetOwnerCall(ctx);
        f.results = new sc.ImmutableGetOwnerResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getRegisteredShopsFromOwner(ctx: wasmlib.ScViewClientContext): GetRegisteredShopsFromOwnerCall {
        const f = new GetRegisteredShopsFromOwnerCall(ctx);
        f.params = new sc.MutableGetRegisteredShopsFromOwnerParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetRegisteredShopsFromOwnerResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getShopStatistics(ctx: wasmlib.ScViewClientContext): GetShopStatisticsCall {
        const f = new GetShopStatisticsCall(ctx);
        f.params = new sc.MutableGetShopStatisticsParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetShopStatisticsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getSpecificProducts(ctx: wasmlib.ScViewClientContext): GetSpecificProductsCall {
        const f = new GetSpecificProductsCall(ctx);
        f.params = new sc.MutableGetSpecificProductsParams(wasmlib.newCallParamsProxy(f.func));
        f.results = new sc.ImmutableGetSpecificProductsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static getTimeslots(ctx: wasmlib.ScViewClientContext): GetTimeslotsCall {
        const f = new GetTimeslotsCall(ctx);
        f.results = new sc.ImmutableGetTimeslotsResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static testView(ctx: wasmlib.ScViewClientContext): TestViewCall {
        const f = new TestViewCall(ctx);
        f.results = new sc.ImmutableTestViewResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }

    static testViewSingle(ctx: wasmlib.ScViewClientContext): TestViewSingleCall {
        const f = new TestViewSingleCall(ctx);
        f.results = new sc.ImmutableTestViewSingleResults(wasmlib.newCallResultsProxy(f.func));
        return f;
    }
}
